import bluebird
import should
import fs
import rimraf as rmdir

fs = bluebird.promisifyAll(fs)
rmdir = bluebird.promisify(rmdir)

import ../bailey
import ./hint

describe('bailey:parsing', () ->
  describe('parseString', () ->
    it('should parse bare', (done) ->
      bailey.parseString('console.log("wee")', {bare: true}).should.equal('console.log("wee");')
      done()
    )

    it('should parse without comments', (done) ->
      bailey.parseString('# Chocolate', {removeComments: true}).should.not.containEql('//')
      done()
    )

    it('should parse with node imports', (done) ->
      bailey.parseString('import color\nconsole.log("wee")', {node: true}).should.containEql('require("color")')
      done()
    )

    it('should parse with normal imports', (done) ->
      bailey.parseString('import color\nconsole.log("wee")', {}).should.containEql('define(["color"]')
      done()
    )
  )

  describe('parseFiles', () ->
    evalFile = (file) ->
      if /\.bs$/.test(file)
        file = 'test/build/' + file.replace('.bs', '.js')
        return fs.readFileAsync(file)
          .then((data) ->
            data.toString().should.be.ok
            result = eval(data.toString())
            should(result).equal(42)
            should(hint(data.toString(), {
              name: file
              hintOptions: { expr: true } # the "output;" on the last line that outputs 42 triggers this warning
            })).be.empty
          )
      else
        return bluebird.resolve


    testHelper = (options, done) ->
      return bailey.parseFiles('test/fixtures/', 'test/build/', options)
        .then(() ->
          return fs.readdirAsync('test/fixtures/')
        )
        .each((fileName) ->
          return evalFile(fileName)
        )

    beforeEach(() -> rmdir('test/build'))

    it('should parse examples with bare option', () ->
      return testHelper({bare: true})
    )

    it('should parse examples with remove comments option', () ->
      return testHelper({bare: true, removeComments: true})
    )

    it('should parse examples with node option', () ->
      return testHelper({bare: true, node: true})
    )
  )
)
