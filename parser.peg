
{
    var indentStack = [], 
        indent = "",
        scopeId = 0;

    function type (name, options) {

        options = options || {};

        var functions = {
            init: options.init || function () {},
            toJS: options.toJS || function () { return '<' + name + '>'; },
            traverse: options.traverse || function () {},
        }

        for ( key in options ) {
            functions[key] = options[key];
        }

        type[name] = function () {
            this.nodeType = name;
            this.parent = null;
            this.children = [];
            functions.init.apply(this, arguments);
        }
        type[name].prototype = functions;
    }

    type('Program', {
        init: function(block) {
            this.block = block;
            this.children = [block];
        },
        traverse: function () {
            var queue = [this];

            // Propagate the imported symbols down to the scope below
            this.block.copySymbols(this.block.getImports().map(function (item) {
                return item.name;
            }))

            while (queue.length) {

                var item = queue.pop(0);
                
                for (var i = 0; i < item.children.length; i++) {

                    var child = item.children[i];

                    if (!child)
                        continue;

                    if (!child.nodeType)
                        continue;
                    
                    queue.push(child);
                    child.parent = item;
                    child.traverse();
                    
                }

            }

        },
        toJS: function () {
            
            this.traverse();

            // Handle imports with require js
            // If an export is defined, this is a DEFINE
            // else, it's a main entry point, and should be a REQUIRE
            var imports = this.block.getImports();
            var export_ = this.block.getExport();

            var pathString = imports.map(function(item) {
                return '"' + item.path + '"';
            }).join(', ');

            var paramString = imports.map(function(item) {
                return item.name;
            }).join(', ');

            var requireString = export_ ? 'define' : 'require'

            var out = requireString + '([' + pathString + '], ';
            out += 'function(' + paramString + ') \x7b';

            out += this.block.toJS();

            if (export_) {
                out += '\nreturn ' + export_.ident + ';';
            }

            out += '\n\x7d);';
            return out;
        }
    });

    type('Noop', {
        toJS: function () {
            return '';
        }
    });

    type('Number', {
        init: function (digits) {
            this.value = parseInt(digits.join(''));
        },
        toJS: function () {
            return this.value;
        }
    })

    type('Variable', {
        init: function (name) {
            this.name = name;
        },
        toJS: function () {
            return this.name;
        }
    });

    type('Assignment', {
        init: function(operator, left, value) {
            this.operator = operator;
            this.left = left;
            this.value = value;
            this.children = [left, value];
            this.varThisSonOfABitch = false;
        },
        traverse: function () {
            if (!this.left.nodeType) {
                this.varThisSonOfABitch = !this.parent.symbols[this.left];
                this.parent.symbols[this.left] = 1;
            }
        },
        toJS: function () {
            var left = this.left.toJS ? this.left.toJS() : this.left;
            var varShit = this.varThisSonOfABitch ? 'var ' : '';
            return varShit + left + ' ' + this.operator + ' ' + this.value.toJS() + ';';
        }
    });

    type('If', {
        init: function (expr, ifBody, elseBody) {
            this.expression = expr;
            this.ifBody = ifBody;
            this.elseBody = elseBody;
            this.children = [expr, ifBody, elseBody];
        },
        toJS: function () {
            var out = 'if (' + this.expression.toJS() + ') {\n';
            out += '    ' + this.ifBody.toJS() + '\n';
            out += '}';

            if (this.elseBody) {
                out += ' else {\n';
                out += this.elseBody.toJS() + '\n';
                out += '}';
            }

            return out;
        }
    })

    type('ForLoop', {
        init: function (iterator, item, iterable, body) {
            this.iterator = iterator || 'i';
            this.item = item;
            this.iterable = iterable;
            this.body = body;
            this.children = [item, iterable, body];
        },
        toJS: function () {
            if (this.iterable.nodeType === 'Range') {
                return this.toJSRanged();
            }
            else {
                return this.toJSListed();
            }
        },
        toJSRanged: function () {
            
            var step = '',
                by = this.iterable.by;
            
            if (by.nodeType === 'Number' && by.value === 0) {
                expected("non-zero expression");
            }

            if (by.value === 1) {
                step = this.iterator + '++';
            }
            else if (by.value === -1) {
                step = this.iterator + '--';
            }
            else if (by.nodeType === 'Number' && by.value < 0) {
                step = this.iterator + ' = ' + this.iterator + by.toJS();
            }
            else {
                step = this.iterator + ' = ' + this.iterator + '+' + by.toJS()
            }
            
            return 'for (var ' + this.iterator + ' = ' + this.iterable.from.toJS() + '; ' + 
                this.iterator + ' < ' + this.iterable.to.toJS() + '; ' + step + ') {\n' +
                this.body.toJS() + '\n' +
                '}';
        },
        toJSListed: function () {
            return 'for (var ' + this.iterator + ' = 0; ' + 
                this.iterator + ' < ' + this.iterable.toJS() + '.length; ' + this.iterator + '++) { ' +
                'var ' + this.item + ' = ' + this.iterable.toJS() + '[' + this.iterator + '];\n' +
                this.body.toJS() + '\n' +
                '}';
        }
    });

    type('WhileLoop', {
        init: function (expression, body) {
            this.expression = expression;
            this.body = body;
            this.children = [expression, body];
        },
        toJS: function () {
            return 'while (' + this.expression.toJS() + ') {\n' +
                   this.body.toJS() + '\n' +
                   '}';
        }
    });

    type('Operator', {
        init: function (op, left, right) {

            this.operator = op === '==' ? '===' : 
                            op === 'and' ? '&&' : 
                            op === 'or' ? '||' : op;
                            
            this.left = left;
            this.right = right;
            this.children = [left, right];
        },
        toJS: function () {
            return this.left.toJS() + ' ' + this.operator + ' ' + this.right.toJS();
        }
    });

    type('UnaryOperator', {
        init: function (op, right) {
            this.operator = op;
            this.right = right;
            this.children = [right];
        },
        toJS: function () {
            return this.operator + ' ' + this.right.toJS();
        }
    });

    type('ListLiteral', {
        init: function (items) {
            this.items = items;
            this.children = items;
        },
        toJS: function () {
            var items = this.items.map(function(item) {
                return item.toJS();
            });
            return '[' + items.join(', ') + ']';
        }
    });

    type('ObjectLiteral', {
        init: function () {
            this.keys = [];
            this.values = [];
            this.children = this.values;
        },
        add: function (val) {
            this.keys.push(val.key);
            this.values.push(val.value)
        },
        toJS: function () {
            var out = '{';
            for (var i = 0; i < this.keys.length; i++) {
                out += this.keys[i] + ': ' + this.values[i].toJS();
                if (i < this.keys.length - 1) {
                    out += ', ';
                }
            }
            return out + '}';
        }
    });

    type('ClassStatement', {
        init: function (name) {
            this.name = name;
            this.values = [];
            this.children = this.children;
        },
        add: function (val) {
            this.values.push(val);
            this.children.push(val.value)
        },
        toJS: function () {
            var name = this.name;
            var out = 'function ' + this.name + '() \x7b \x7d;\n'
            out += this.values.map(function(item) {
                return name + '.prototype.' + item.key + ' = ' + item.value.toJS() + ';'
            }).join('\n');
            return out;
        }
    });

    type('LoopControl', {
        init: function (type) {
            this.type = type;
        },
        toJS: function () {
            return this.type + ';';
        }
    });

    type('ImportStatement', {
        init: function (path, name) {
            this.path = path;
            this.name = name || path.split('.')[path.split('.').length-1];
        },
        toJS: function () {
            return ''; // Ignored for now
        }
    });

    type('ExportStatement', {
        init: function (ident) {
            this.ident = ident;
        },
        toJS: function () {
            return ''; // Ignored for now
        }
    });

    type('Literal', {
        init: function (type) {
            this.type = type;
        },
        toJS: function () {
            return this.type;
        }
    });

    type('StringLiteral', {
        init: function (token, string) {
            this.token = token;
            this.string = string.replace(token, '\\' + token);
        },
        toJS: function () {
            return this.token + this.string.split('\n').join('') + this.token;
        }
    });

    type('Block', {
        init: function(statements) {
            this.name = '__scope_' + scopeId++ + '__';
            this.declareName = false;
            this.symbols = {};
            this.statements = statements;
            this.children = statements;
        },
        traverse: function () {

            var node = this.parent;

            while (node) {

                if (node.nodeType === 'Block') {
                    this.parentScope = node;
                    this.symbols.__proto__ = node.symbols;
                    return;
                }

                node = node.parent;
            }

        },
        toJS: function () {

            var out = '';

            if (this.declareName) {
                out += 'var ' + this.name + ' = this;\n';
            }

            return out + this.statements.map(function (s) {
                return s.toJS();
            }).join('\n');
        },
        getImports: function () {
            return this.statements.filter(function(statement) {
                return statement.nodeType === 'ImportStatement';
            });
        },
        getExport: function () {
            var test = this.statements.filter(function(statement) {
                return statement.nodeType === 'ExportStatement';
            });
            if (test.length > 1) {
                throw 'More than one export statement found!'
            }
            if (test.length === 0) {
                return null;
            }
            return test[0];
        },
        getScopeName: function () {
            this.declareName = true;
            return this.name;
        },
        copySymbols: function (list) {
            for (var i = 0; i < list.length; i++) {
                this.symbols[list[i]] = 1;
            }
        }
    });

    type('Group', {
        init: function(expr) {
            this.expr = expr;
            this.children = [expr];
        },
        toJS: function () {
            return '(' + this.expr.toJS() + ')';
        }
    });

    type('Function', {
        init: function (params, body) {
            this.params = params;
            this.body = body;
            this.children = [body];
        },
        traverse: function () {
            if (this.body.nodeType === 'Block') {
                this.body.copySymbols(this.params);
            }
        },
        toJS: function () {
            return 'function(' + this.params.join(', ') + '){' + this.body.toJS() + '}';
        }
    });

    type('Return', {
        init: function (body) {
            this.body = body;
            this.children = [body];
        },
        toJS: function () {
            return 'return ' + this.body.toJS() + ';';
        }
    });

    type('FunctionCall', {
        init: function (expr, args) {
            this.expr = expr;
            this.args = args;
            this.children = [expr].concat(args);
        },
        toJS: function () {
            var expr = this.expr.toJS ? this.expr.toJS() : this.expr;
            return expr + '(' + this.args.join(', ') + ')';
        }
    });

    type('PropertyAccess', {
        init: function (value, accessors) {
            this.value = value;
            this.accessors = accessors;
            this.children = [value].concat(accessors);
        },
        toJS: function () {

            return this.value.toJS() + this.accessors.map(function(accessor) {
                if (typeof accessor === 'string')
                    return '.' + accessor;
                
                return '[' + accessor.toJS() + ']';
            }).join('');

        }
    });

    type('ThisToken', {
        init: function(scopeOffset) {
            this.scopeOffset = scopeOffset;
            this.scopeIdentifier = 'UntraversedThisToken';
        },
        traverse: function () {
            this.scopeIdentifier = this.findScopeIdentifier();
        },
        toJS: function () {
            return this.scopeIdentifier;
        },
        findScopeIdentifier: function () {

            if (this.scopeOffset === 0 ) {
                return 'this';
            }

            var offset = this.scopeOffset + 1;
            var node = this.parent;

            while (node) {

                if (node.nodeType === 'Block') {
                    offset--;
                }

                if (offset === 0) {
                    return node.getScopeName();
                }

                node = node.parent;
            }

            throw 'Scope access overflow; not enough scopes to traverse';
        }
    });

    type('NewExpression', {
        init: function(classExpression) {
            this.classExpression = classExpression;
        },
        toJS: function () {
            return 'new ' + this.classExpression.toJS();
        }
    });

    type('Range', {
        init: function(from, to, by) {
            this.from = from;
            this.to = to;
            this.by = by;
        }
    })

}

Program
    = block:Block
        {
            return new type.Program(block);
        }

Block
    = statements:(Statement (EOL Indent Statement)*)
        {
            var list = [statements[0]];
            for(var i = 0; i < statements[1].length; i++) list.push(statements[1][i][2]);
            return new type.Block(list) 
        }

Statement

    = 'if ' condition:Expression IndentNewline ifBody:Block IndentRemove EOL+
      Indent 'else' IndentNewline elseBody:Block IndentRemove 
        { return new type.If(condition, ifBody, elseBody); }

    / 'if ' condition:Expression IndentNewline ifBody:Block IndentRemove
        { return new type.If(condition, ifBody); }

    / 'for ' iterator:Identifier ', ' item:Identifier ' in ' iterable:Expression IndentNewline body:Block IndentRemove
        { return new type.ForLoop(iterator, item, iterable, body); } 

    / 'for ' item:Identifier ' in ' iterable:(Range / Expression) IndentNewline body:Block IndentRemove
        { return new type.ForLoop(null, item, iterable, body); } 

    / 'while ' e:Expression IndentNewline body:Block IndentRemove
        { return new type.WhileLoop(e, body); } 

    / word:('break' / 'continue')
        { return new type.LoopControl(word) }

    / 'import ' path:[a-zA-Z.]+ ' as ' name:Identifier
        { return new type.ImportStatement(path.join(''), name); }

    / 'import ' path:[a-zA-Z.]+
        { return new type.ImportStatement(path.join('')); }

    / 'export ' ident:Identifier
        { return new type.ExportStatement(ident); }

    / 'return ' expr:Expression
        { return new type.Return(expr); }

    / 'class ' ident:Identifier IndentNewline
        head:(__ KeyValuePair) 
        tail:((EOL Indent)+ KeyValuePair)* IndentRemove
        {
            var obj = new type.ClassStatement(ident);
            if (head !== '') obj.add(head[1]);

            for (var i = 0; i < tail.length; i++)
                if (tail[i][1].key)
                    obj.add(tail[i][1])

            return obj;
        }

    / Assign

    / Expression

    / Comment

    / { return new type.Noop() }

EOL
    = '\r\n' / '\n' / '\r'

Indent
    = i:[ \t]* 
        &{ return i.join("") === indent; }

IndentNewline
    = EOL IndentAdd Indent

IndentAdd
    = i:[ \t]+ &{ return i.length > indent.length; }
        { indentStack.push(indent); indent = i.join(""); peg$currPos = offset(); }

IndentRemove
    =
        { indent = indentStack.pop(); }

Comment
    = '#' (!EOL .)*
        { return new type.Noop(); }

Assign 
    = left:Identifier _ op:AssignmentOperator _ value:Expression 
        { return new type.Assignment(op, left, value) }

    / left:PropertyExpression _ op:AssignmentOperator _ value:Expression 
        { return new type.Assignment(op, left, value) }

    / left:ThisProperty _ op:AssignmentOperator _ value:Expression 
        { return new type.Assignment(op, left, value) }

AssignmentOperator
    = '=' (!'=') { return '='; }
    / '*='
    / '/='
    / '%='
    / '+='
    / '-='
    / '<<='
    / '>>='
    / '>>>='
    / '&='
    / '^='
    / '|='

BinaryOperator
    = '+'
    / '-'
    / '*'
    / '/'
    
    / '>>'
    / '>>>'
    / '<<'

    / '=='
    / '!='
    / '<='
    / '>='
    / '<'
    / '>'

    / 'and'
    / 'or'
    / 'instanceof'
    / 'in'

UnaryOperator
    = 'delete'
    / 'typeof'
    / '+'
    / '-'
    / '~'
    / '!'

//
// Cheat alert: This completely ignores operator presedence for simplicity,
// and will create a wrong ast. However, as long as we do not really
// fiddle with operators, it'll output correct javascript.
//
Expression 
    = left:Value _ op:BinaryOperator _ right:Expression 
        { return new type.Operator(op, left, right); }
    
    / PropertyExpression
        
    / Value

PropertyExpression
    = value:Value accessors:(
        '[' __ expr:Expression __ ']' { return expr; }
      / '.' __ expr:Expression        { return expr; }
    )+
        {
            return new type.PropertyAccess(value, accessors); 
        }


Value
    = Number
    
    / Literal

    / ThisProperty

    / ThisToken
    
    / StringLiteral

    / op:UnaryOperator _ right:Expression 
        { return new type.UnaryOperator(op, right); }

    / expr:(Identifier / GroupedExpression) _ '(' __ args:ExpressionTuple __ ')'
        { return new type.FunctionCall(expr, args); }

    / a:Identifier 
        { return new type.Variable(a); }

    / 'new' _ expr:Expression
        { return new type.NewExpression(expr); } 

    / 'return' _ expr:Expression
        { return new type.Return(expr); } 

    / '[' __ head:Expression? tail:(__ ',' __ Expression)* __ ','? __ ']'
        { 
            var list = tail.map(function(item) { return item[3]; }); 
            if (head !== null) list.push(head);
            return new type.ListLiteral(list);
        }

    / '{' 
            head:(__ KeyValuePair)? 
            tail:(_ ',' __ KeyValuePair)* __ ','? __  
      '}'
        {
            var obj = new type.ObjectLiteral();
            if (head !== null) obj.add(head[1]);
            for (var i = 0; i < tail.length; i++) 
                if (tail[i][3].key)
                    obj.add(tail[i][3]);
            return obj;
        }

    / '(' _ params:IdentifierTuple _ ')' _ '->' IndentNewline body:Block IndentRemove
        { return new type.Function(params, body); }

    / '(' _ params:IdentifierTuple _ ')' _ '->' _ body:(Expression / Noop)
        { return new type.Function(params, new type.Return(body)); }

    / GroupedExpression

KeyValuePair
    = key:Identifier _ ':' _ value:Expression
        { return {key: key, value: value}; }

GroupedExpression
    = '(' __ a:Expression __ ')' 
        { return new type.Group(a); }

Range
    = from:Expression _ ':' _ to:Expression _ ':' _ by:Expression
        { return new type.Range(from, to, by); }

Number 
    = digits:[-0-9]+ 
        { return new type.Number(digits); }

Identifier
    = $ (!ReservedWord IdentifierPart)

IdentifierPart
    = (Digits / Letters / '_')+

IdentifierTuple
    = head:Identifier tail:(_ ',' _ Identifier)* _
        {
            tail = tail.map(function(item) { return item[3]; });
            return [head].concat(tail);
        }
    / { return [] }

ExpressionTuple
    = head:Expression tail:(_ ',' __ Expression)*
        {
            tail = tail.map(function(item) { return item[3]; });
            return [head].concat(tail);
        }
    / { return [] }

Digits
    = $ [0-9]+

Letters
    = $ [a-zA-Z]+ 

_
    = (' ' / '\t' / Comment)*

__ 
    = (' ' / '\t' / '\r' / '\n' / Comment)*

Noop
    = _
        { return type.Noop(); }

ReservedWord
  = Keyword
  / Literal

Keyword
    = (   
        'break'
        / 'case'
        / 'catch'
        / 'continue'
        / 'debugger'
        / 'default'
        / 'delete'
        / 'do'
        / 'else'
        / 'finally'
        / 'for'
        / 'function'
        / 'if'
        / 'instanceof'
        / 'in'
        / 'new'
        / 'return'
        / 'switch'
        / 'this'
        / 'throw'
        / 'try'
        / 'typeof'
        / 'var'
        / 'void'
        / 'while'
        / 'with' 
        / 'class'
        / 'const'
        / 'enum'
        / 'export'
        / 'extends'
        / 'import'
        / 'super'
    ) !IdentifierPart

Literal
    = word:('null' / 'true' / 'false' / 'undefined' )
        { return new type.Literal(word); }

ThisToken
    = tokens:'@'+
        { return new type.ThisToken(tokens.length - 1); }

ThisProperty
    = token:ThisToken expr:Expression
        { return new type.PropertyAccess(token, [expr]); }


StringLiteral "string"
  = parts:('"' DoubleStringCharacters? '"' / "'" SingleStringCharacters? "'") {
      return new type.StringLiteral(parts[0], parts[1]);
    }

DoubleStringCharacters
  = chars:DoubleStringCharacter+ { return chars.join(""); }

SingleStringCharacters
  = chars:SingleStringCharacter+ { return chars.join(""); }

DoubleStringCharacter
  = !('"' / "\\") char_:.        { return char_;     }
  / "\\" sequence:EscapeSequence { return sequence;  }

SingleStringCharacter
  = !("'" / "\\") char_:.        { return char_;     }
  / "\\" sequence:EscapeSequence { return sequence;  }

EscapeSequence
  = SingleEscapeCharacter
  / NonEscapeCharacter

SingleEscapeCharacter
  = ['"]

NonEscapeCharacter
  = (!SingleEscapeCharacter / EOL) char_:. { return char_; }