
{
    var indentStack = [], indent = "";

    function Noop() {
        this.nodeType = 'Noop';
    }

    function Number(digits) {
        this.nodeType = 'Number';
        this.value = parseInt(digits.join(''));
    }

    function Expression (children) {
        this.nodeType = 'Expression'
        this.children = children;
    }

    function Declaration (name, value) {
        this.nodeType = 'Declaration';
        this.name = name;
        this.value = value;
    }

    function Condition (expr, ifBody, elseBody) {
        this.nodeType = 'Condition';
        this.expression = expr;
        this.ifBody = ifBody;
        this.elseBody = elseBody;
    }

    function ForLoop (iterator, item, iterable, body) {
        this.nodeType = 'For';
        this.iterator = iterator;
        this.item = item;
        this.iterable = iterable;
        this.body = body;
    }

    function WhileLoop(expression, body) {
        this.nodeType = 'WhileLoop';
        this.expression = expression;
        this.body = body;
    }

}

program
    = statement*

statement 
    = SAMEDENT EOL
      { return new Noop(); }

    / SAMEDENT a:expr EOL
      { return a; }

    / SAMEDENT 'if ' a:expr EOL INDENT ifBody:statement+ DEDENT
      SAMEDENT 'else' EOL INDENT elseBody:statement+ DEDENT 
      { return new Condition(a, ifBody, elseBody); }

    / SAMEDENT 'if ' a:expr EOL INDENT ifBody:statement+ DEDENT
      { return new Condition(a, ifBody); }

    / SAMEDENT 'for ' iterator:ident ', ' item:ident ' in ' iterable:expr EOL INDENT body:statement+ DEDENT
      { return new ForLoop(iterator, item, iterable, body); } 

    / SAMEDENT 'for ' item:ident ' in ' iterable:expr EOL INDENT body:statement+ DEDENT
      { return new ForLoop(null, item, iterable, body); } 

    / SAMEDENT 'while ' e:expr EOL INDENT body:statement+ DEDENT
      { return new WhileLoop(e, body); } 

EOL
    = '\r\n' / '\n' / '\r'

SAMEDENT
    = i:[ \t]* &{ return i.join("") === indent; }

INDENT
    = i:[ \t]+ &{ return i.length > indent.length; }
    { indentStack.push(indent); indent = i.join(""); pos = offset; }

DEDENT
    = { indent = indentStack.pop(); }

expr 
    = a:decl { return new Expression([a]); }
    / a:number { return new Expression([a]); }
    / a:ident { return new Expression([a]); }

number 
    = digits:[0-9]+ { return new Number(digits); }

decl 
    = a:ident ' = ' b:digits { return new Declaration(a, b) }

ident
    = a:(digits / letters / '_')+ { return a.join(''); }

digits
    = a:[0-9]+ { return a.join(''); }

letters
    = a:[a-zA-Z]+ { return a.join(''); }