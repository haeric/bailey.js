module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { Program: peg$parseProgram, Expression: peg$parseExpression },
        peg$startRuleFunction  = peg$parseProgram,

        peg$c0 = function(block) {
                    block.isScope = true;
                    return new type.Program(block);
                },
        peg$c1 = peg$FAILED,
        peg$c2 = [],
        peg$c3 = function(statements) {
                    var list = [statements[0]];
                    for(var i = 0; i < statements[1].length; i++) list.push(statements[1][i][3]);
                    return new type.Block(list)
                },
        peg$c4 = "if ",
        peg$c5 = { type: "literal", value: "if ", description: "\"if \"" },
        peg$c6 = null,
        peg$c7 = "elif",
        peg$c8 = { type: "literal", value: "elif", description: "\"elif\"" },
        peg$c9 = "else",
        peg$c10 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c11 = function(condition, ifBody, elifPart, elsePart) {
                    var elifs = elifPart.map(function(elif) {
                        return new type.If(elif[3], elif[4]);
                    });
                    return new type.If(condition, ifBody, elifs, elsePart ? elsePart[2] : null);
                },
        peg$c12 = "while ",
        peg$c13 = { type: "literal", value: "while ", description: "\"while \"" },
        peg$c14 = function(e, body) { return new type.WhileLoop(e, body); },
        peg$c15 = "break",
        peg$c16 = { type: "literal", value: "break", description: "\"break\"" },
        peg$c17 = "continue",
        peg$c18 = { type: "literal", value: "continue", description: "\"continue\"" },
        peg$c19 = void 0,
        peg$c20 = function(word) { return new type.LoopControl(word) },
        peg$c21 = "import ",
        peg$c22 = { type: "literal", value: "import ", description: "\"import \"" },
        peg$c23 = /^[\-a-zA-Z0-9._!\/]/,
        peg$c24 = { type: "class", value: "[\\-a-zA-Z0-9._!\\/]", description: "[\\-a-zA-Z0-9._!\\/]" },
        peg$c25 = " as ",
        peg$c26 = { type: "literal", value: " as ", description: "\" as \"" },
        peg$c27 = ":",
        peg$c28 = { type: "literal", value: ":", description: "\":\"" },
        peg$c29 = ",",
        peg$c30 = { type: "literal", value: ",", description: "\",\"" },
        peg$c31 = function(path, name, subImports) {
                    var subs = [];
                    if (subImports) {
                        subs.push(new type.SubImportStatement(subImports[3]));
                        subs = subs.concat(subImports[5].map(function(group){
                            return new type.SubImportStatement(group[2])
                        }));
                    }
                    return new type.ImportStatement(path.join(''), name ? name[1] : undefined, subs);
                },
        peg$c32 = "include ",
        peg$c33 = { type: "literal", value: "include ", description: "\"include \"" },
        peg$c34 = /^[a-zA-Z0-9._\-]/,
        peg$c35 = { type: "class", value: "[a-zA-Z0-9._\\-]", description: "[a-zA-Z0-9._\\-]" },
        peg$c36 = function(path) { return new type.IncludeStatement(path.join('')); },
        peg$c37 = "export ",
        peg$c38 = { type: "literal", value: "export ", description: "\"export \"" },
        peg$c39 = function(ident) { return new type.ExportStatement(ident); },
        peg$c40 = "return",
        peg$c41 = { type: "literal", value: "return", description: "\"return\"" },
        peg$c42 = function(expr) { return new type.Return(expr); },
        peg$c43 = "try",
        peg$c44 = { type: "literal", value: "try", description: "\"try\"" },
        peg$c45 = "catch",
        peg$c46 = { type: "literal", value: "catch", description: "\"catch\"" },
        peg$c47 = function(tryBody, catchVar, catchBody) { return new type.TryCatch(tryBody, catchVar, catchBody)},
        peg$c48 = "throw",
        peg$c49 = { type: "literal", value: "throw", description: "\"throw\"" },
        peg$c50 = function(expr) { return new type.Throw(expr); },
        peg$c51 = "pass",
        peg$c52 = { type: "literal", value: "pass", description: "\"pass\"" },
        peg$c53 = function() { return new type.Noop() },
        peg$c54 = "class",
        peg$c55 = { type: "literal", value: "class", description: "\"class\"" },
        peg$c56 = "extends",
        peg$c57 = { type: "literal", value: "extends", description: "\"extends\"" },
        peg$c58 = function(ident, extender, head, tail) {
                    var obj = new type.ClassStatement(ident, extender ? extender[2] : null);
                    if (head !== '') obj.add(head[1]);

                    for (var i = 0; i < tail.length; i++)
                        if (tail[i][1].key)
                            obj.add(tail[i][1])

                    return obj;
                },
        peg$c59 = "for ",
        peg$c60 = { type: "literal", value: "for ", description: "\"for \"" },
        peg$c61 = ", ",
        peg$c62 = { type: "literal", value: ", ", description: "\", \"" },
        peg$c63 = " in ",
        peg$c64 = { type: "literal", value: " in ", description: "\" in \"" },
        peg$c65 = function(iterator, item, iterable, body) { return new type.ForLoop(iterator, item, iterable, body); },
        peg$c66 = function(item, iterable, body) { return new type.ForLoop(null, item, iterable, body); },
        peg$c67 = " of ",
        peg$c68 = { type: "literal", value: " of ", description: "\" of \"" },
        peg$c69 = function(item, iterable, body) { return new type.ForLoop(null, item, iterable, body, true); },
        peg$c70 = function(block) { return block; },
        peg$c71 = "then",
        peg$c72 = { type: "literal", value: "then", description: "\"then\"" },
        peg$c73 = function(statement) { return statement; },
        peg$c74 = "\r\n",
        peg$c75 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c76 = "\n",
        peg$c77 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c78 = "\r",
        peg$c79 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c80 = /^[ \t]/,
        peg$c81 = { type: "class", value: "[ \\t]", description: "[ \\t]" },
        peg$c82 = function(i) { return i.join("") === indent; },
        peg$c83 = function(i) { return i.length > indent.length; },
        peg$c84 = function(i) {
                    indentStack.push(indent);
                    indent = i.join("");
                    peg$currPos = offset();
                },
        peg$c85 = function() { indent = indentStack.pop(); },
        peg$c86 = "#",
        peg$c87 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c88 = { type: "any", description: "any character" },
        peg$c89 = function(text) { return new type.Comment(text); },
        peg$c90 = function(left, op, value) { return new type.Assignment(op, left, value) },
        peg$c91 = "=",
        peg$c92 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c93 = function() { return '='; },
        peg$c94 = "*=",
        peg$c95 = { type: "literal", value: "*=", description: "\"*=\"" },
        peg$c96 = "/=",
        peg$c97 = { type: "literal", value: "/=", description: "\"/=\"" },
        peg$c98 = "%=",
        peg$c99 = { type: "literal", value: "%=", description: "\"%=\"" },
        peg$c100 = "+=",
        peg$c101 = { type: "literal", value: "+=", description: "\"+=\"" },
        peg$c102 = "-=",
        peg$c103 = { type: "literal", value: "-=", description: "\"-=\"" },
        peg$c104 = "<<=",
        peg$c105 = { type: "literal", value: "<<=", description: "\"<<=\"" },
        peg$c106 = ">>=",
        peg$c107 = { type: "literal", value: ">>=", description: "\">>=\"" },
        peg$c108 = ">>>=",
        peg$c109 = { type: "literal", value: ">>>=", description: "\">>>=\"" },
        peg$c110 = "&=",
        peg$c111 = { type: "literal", value: "&=", description: "\"&=\"" },
        peg$c112 = "^=",
        peg$c113 = { type: "literal", value: "^=", description: "\"^=\"" },
        peg$c114 = "|=",
        peg$c115 = { type: "literal", value: "|=", description: "\"|=\"" },
        peg$c116 = "+",
        peg$c117 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c118 = "-",
        peg$c119 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c120 = "*",
        peg$c121 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c122 = "/",
        peg$c123 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c124 = "%",
        peg$c125 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c126 = "&",
        peg$c127 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c128 = "|",
        peg$c129 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c130 = "^",
        peg$c131 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c132 = ">>",
        peg$c133 = { type: "literal", value: ">>", description: "\">>\"" },
        peg$c134 = ">>>",
        peg$c135 = { type: "literal", value: ">>>", description: "\">>>\"" },
        peg$c136 = "<<",
        peg$c137 = { type: "literal", value: "<<", description: "\"<<\"" },
        peg$c138 = "==",
        peg$c139 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c140 = function() { return '==='; },
        peg$c141 = "!=",
        peg$c142 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c143 = function() { return '!=='; },
        peg$c144 = "<=",
        peg$c145 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c146 = ">=",
        peg$c147 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c148 = "<",
        peg$c149 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c150 = ">",
        peg$c151 = { type: "literal", value: ">", description: "\">\"" },
        peg$c152 = "and",
        peg$c153 = { type: "literal", value: "and", description: "\"and\"" },
        peg$c154 = function() { return '&&'; },
        peg$c155 = "or",
        peg$c156 = { type: "literal", value: "or", description: "\"or\"" },
        peg$c157 = function() { return '||'; },
        peg$c158 = "instanceof",
        peg$c159 = { type: "literal", value: "instanceof", description: "\"instanceof\"" },
        peg$c160 = function() { return 'instanceof'; },
        peg$c161 = "in",
        peg$c162 = { type: "literal", value: "in", description: "\"in\"" },
        peg$c163 = function() { return 'in'; },
        peg$c164 = "delete",
        peg$c165 = { type: "literal", value: "delete", description: "\"delete\"" },
        peg$c166 = function() { return 'delete'; },
        peg$c167 = "typeof",
        peg$c168 = { type: "literal", value: "typeof", description: "\"typeof\"" },
        peg$c169 = function() { return 'typeof'; },
        peg$c170 = "++",
        peg$c171 = { type: "literal", value: "++", description: "\"++\"" },
        peg$c172 = "--",
        peg$c173 = { type: "literal", value: "--", description: "\"--\"" },
        peg$c174 = "~",
        peg$c175 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c176 = "not",
        peg$c177 = { type: "literal", value: "not", description: "\"not\"" },
        peg$c178 = function() { return '!'},
        peg$c179 = "?",
        peg$c180 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c181 = function(cond, rest) {
                    if (!rest) {
                        return cond;
                    }
                    return new type.If(cond, rest[3], null, rest[7], true);
                },
        peg$c182 = function(left, rest) {
                    if (!rest) {
                        return left;
                    }
                    return new type.Operator(rest[1], left, rest[3]);
                },
        peg$c183 = function(left, op) {
                    if (!op) {
                        return left;
                    }
                    return new type.Operator(op, left);
                },
        peg$c184 = "[",
        peg$c185 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c186 = "]",
        peg$c187 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c188 = function(expr) { return {type: '[]', expr: expr} },
        peg$c189 = ".",
        peg$c190 = { type: "literal", value: ".", description: "\".\"" },
        peg$c191 = function(expr) { return {type: '.', expr: expr} },
        peg$c192 = "(",
        peg$c193 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c194 = ")",
        peg$c195 = { type: "literal", value: ")", description: "\")\"" },
        peg$c196 = function(args) { return args; },
        peg$c197 = function(value, modifiers) {
                    for (var i = 0; i < modifiers.length; i++) {
                        if (modifiers[i].type) {
                            value = new type.PropertyAccess(value, modifiers[i].expr, modifiers[i].type)
                        }
                        else {
                            value = new type.FunctionCall(value, modifiers[i]);
                        }
                    }
                    return value;
                },
        peg$c198 = function(op, right) { return new type.UnaryOperator(op, right); },
        peg$c199 = function(a) { return new type.Variable(a); },
        peg$c200 = "super",
        peg$c201 = { type: "literal", value: "super", description: "\"super\"" },
        peg$c202 = function() { return new type.SuperToken(); },
        peg$c203 = "new",
        peg$c204 = { type: "literal", value: "new", description: "\"new\"" },
        peg$c205 = function(expr) { return new type.NewExpression(expr); },
        peg$c206 = function(head, tail) {
                    var list = [];
                    if (head !== null) {
                        list.push(head);
                    }
                    list = list.concat(tail.map(function(item) { return item[3]; }));
                    return new type.ListLiteral(list);
                },
        peg$c207 = "{",
        peg$c208 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c209 = "}",
        peg$c210 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c211 = function(head, tail) {
                    var obj = new type.ObjectLiteral();
                    if (head !== null) obj.add(head[1]);
                    for (var i = 0; i < tail.length; i++) {
                        if (tail[i][3].key) {
                            obj.add(tail[i][3]);
                        }
                    }
                    return obj;
                },
        peg$c212 = "->",
        peg$c213 = { type: "literal", value: "->", description: "\"->\"" },
        peg$c214 = function(params, body) {
                    body.isScope = true;
                    return new type.Function(params, body);
                },
        peg$c215 = function(params, body) {
                    body.isScope = true;
                    return new type.Function(params, new type.Return(body));
                },
        peg$c216 = function(key, value) { return {key: key, value: value}; },
        peg$c217 = function(str) { return str.join(''); },
        peg$c218 = "\"",
        peg$c219 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c220 = "'",
        peg$c221 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c222 = function(a) { return new type.Group(a); },
        peg$c223 = function(from, equals, to, by) {
                    by = by ? by[2] : {value: 1};
                    return new type.Range(from, to, by, !!equals); },
        peg$c224 = "0",
        peg$c225 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c226 = /^[1-9]/,
        peg$c227 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c228 = /^[0-9]/,
        peg$c229 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c230 = "e",
        peg$c231 = { type: "literal", value: "e", description: "\"e\"" },
        peg$c232 = function(fract, e) { return new type.Number(text()); },
        peg$c233 = "0x",
        peg$c234 = { type: "literal", value: "0x", description: "\"0x\"" },
        peg$c235 = /^[0-9a-fA-F]/,
        peg$c236 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c237 = function() { return new type.Literal(text()); },
        peg$c238 = "_",
        peg$c239 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c240 = function(head, tail) {
                    tail = tail.map(function(item) { return item[3]; });
                    return [head].concat(tail);
                },
        peg$c241 = function() { return [] },
        peg$c242 = /^[a-zA-Z$_]/,
        peg$c243 = { type: "class", value: "[a-zA-Z$_]", description: "[a-zA-Z$_]" },
        peg$c244 = " ",
        peg$c245 = { type: "literal", value: " ", description: "\" \"" },
        peg$c246 = "\t",
        peg$c247 = { type: "literal", value: "\t", description: "\"\\t\"" },
        peg$c248 = function() { return new type.Noop(); },
        peg$c249 = "case",
        peg$c250 = { type: "literal", value: "case", description: "\"case\"" },
        peg$c251 = "debugger",
        peg$c252 = { type: "literal", value: "debugger", description: "\"debugger\"" },
        peg$c253 = "default",
        peg$c254 = { type: "literal", value: "default", description: "\"default\"" },
        peg$c255 = "do",
        peg$c256 = { type: "literal", value: "do", description: "\"do\"" },
        peg$c257 = "finally",
        peg$c258 = { type: "literal", value: "finally", description: "\"finally\"" },
        peg$c259 = "for",
        peg$c260 = { type: "literal", value: "for", description: "\"for\"" },
        peg$c261 = "function",
        peg$c262 = { type: "literal", value: "function", description: "\"function\"" },
        peg$c263 = "if",
        peg$c264 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c265 = "switch",
        peg$c266 = { type: "literal", value: "switch", description: "\"switch\"" },
        peg$c267 = "this",
        peg$c268 = { type: "literal", value: "this", description: "\"this\"" },
        peg$c269 = "var",
        peg$c270 = { type: "literal", value: "var", description: "\"var\"" },
        peg$c271 = "void",
        peg$c272 = { type: "literal", value: "void", description: "\"void\"" },
        peg$c273 = "while",
        peg$c274 = { type: "literal", value: "while", description: "\"while\"" },
        peg$c275 = "with",
        peg$c276 = { type: "literal", value: "with", description: "\"with\"" },
        peg$c277 = "const",
        peg$c278 = { type: "literal", value: "const", description: "\"const\"" },
        peg$c279 = "enum",
        peg$c280 = { type: "literal", value: "enum", description: "\"enum\"" },
        peg$c281 = "export",
        peg$c282 = { type: "literal", value: "export", description: "\"export\"" },
        peg$c283 = "import",
        peg$c284 = { type: "literal", value: "import", description: "\"import\"" },
        peg$c285 = "null",
        peg$c286 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c287 = "true",
        peg$c288 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c289 = "false",
        peg$c290 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c291 = "undefined",
        peg$c292 = { type: "literal", value: "undefined", description: "\"undefined\"" },
        peg$c293 = function(word) { return new type.Literal(word); },
        peg$c294 = "@",
        peg$c295 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c296 = function(tokens) { return new type.ThisToken(tokens.length - 1); },
        peg$c297 = function(token, ident) { return new type.PropertyAccess(token, new type.Literal(ident), '.'); },
        peg$c298 = { type: "other", description: "string" },
        peg$c299 = function(parts) {
                var d = parts[0];
                var text = parts[1] !== null ? parts[1].join('') : "";


                // Is this a normal string?
                if (text.indexOf('#\x7b') === -1) {
                    return new type.StringLiteral(d, text);
                }

                // Oh, it contains variables. Let's reparse it then! Somewhat of a hack, but.. :)
                var re = new RegExp("#{([^\x7d]+)}", "g");
                text = d + text.replace(re, d + ' + $1 + ' + d) + d;
                return parser.parse(text, {startRule: 'Expression'});

            },
        peg$c300 = "\\",
        peg$c301 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c302 = function() { return text(); },
        peg$c303 = function(sequence) { return sequence; },
        peg$c304 = function() { return "\\\\"; },
        peg$c305 = "b",
        peg$c306 = { type: "literal", value: "b", description: "\"b\"" },
        peg$c307 = function() { return "\b";   },
        peg$c308 = "f",
        peg$c309 = { type: "literal", value: "f", description: "\"f\"" },
        peg$c310 = function() { return "\f";   },
        peg$c311 = "n",
        peg$c312 = { type: "literal", value: "n", description: "\"n\"" },
        peg$c313 = function() { return "\n";   },
        peg$c314 = "r",
        peg$c315 = { type: "literal", value: "r", description: "\"r\"" },
        peg$c316 = function() { return "\r";   },
        peg$c317 = "t",
        peg$c318 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c319 = function() { return "\t";   },
        peg$c320 = "v",
        peg$c321 = { type: "literal", value: "v", description: "\"v\"" },
        peg$c322 = function() { return "\x0B"; },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseProgram() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseBlock();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBlock() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseStatement();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parse_();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseEOL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseIndent();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseStatement();
              if (s8 !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$c1;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseEOL();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseIndent();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseStatement();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c3(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c4) {
        s1 = peg$c4;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIndentedBlockOrThenPlusExpresssion();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$currPos;
            s8 = peg$parseEOL();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseIndent();
              if (s9 !== peg$FAILED) {
                s10 = peg$parseComment();
                if (s10 === peg$FAILED) {
                  s10 = peg$c6;
                }
                if (s10 !== peg$FAILED) {
                  s8 = [s8, s9, s10];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c1;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$c1;
            }
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parseEOL();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseIndent();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseComment();
                    if (s10 === peg$FAILED) {
                      s10 = peg$c6;
                    }
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c1;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c1;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
              }
            } else {
              s6 = peg$c1;
            }
            if (s6 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c7) {
                s7 = peg$c7;
                peg$currPos += 4;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseExpression();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseIndentedBlockOrThenPlusExpresssion();
                    if (s10 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9, s10];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c1;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c1;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c1;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parseEOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseIndent();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseComment();
                  if (s10 === peg$FAILED) {
                    s10 = peg$c6;
                  }
                  if (s10 !== peg$FAILED) {
                    s8 = [s8, s9, s10];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c1;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = peg$parseEOL();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseIndent();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseComment();
                      if (s10 === peg$FAILED) {
                        s10 = peg$c6;
                      }
                      if (s10 !== peg$FAILED) {
                        s8 = [s8, s9, s10];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c1;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c1;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c1;
                  }
                }
              } else {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c7) {
                  s7 = peg$c7;
                  peg$currPos += 4;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c8); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseExpression();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseIndentedBlockOrThenPlusExpresssion();
                      if (s10 !== peg$FAILED) {
                        s6 = [s6, s7, s8, s9, s10];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c1;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c1;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c1;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parseEOL();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseIndent();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseComment();
                  if (s10 === peg$FAILED) {
                    s10 = peg$c6;
                  }
                  if (s10 !== peg$FAILED) {
                    s8 = [s8, s9, s10];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c1;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = peg$parseEOL();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseIndent();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseComment();
                      if (s10 === peg$FAILED) {
                        s10 = peg$c6;
                      }
                      if (s10 !== peg$FAILED) {
                        s8 = [s8, s9, s10];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c1;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c1;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c1;
                  }
                }
              } else {
                s6 = peg$c1;
              }
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c9) {
                  s7 = peg$c9;
                  peg$currPos += 4;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c10); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseIndentedBlockOrExpresssion();
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c1;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c6;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c11(s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c12) {
          s1 = peg$c12;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseExpression();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseIndentNewline();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseBlock();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseIndentRemove();
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c14(s2, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c15) {
            s1 = peg$c15;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c17) {
              s1 = peg$c17;
              peg$currPos += 8;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            s3 = peg$parseAnyIdentifier();
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = peg$c19;
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c20(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c21) {
              s1 = peg$c21;
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              if (peg$c23.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  if (peg$c23.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                }
              } else {
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c25) {
                  s4 = peg$c25;
                  peg$currPos += 4;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c26); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseIdentifier();
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$c6;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s6 = peg$c27;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c28); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseIdentifier();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parse_();
                          if (s9 !== peg$FAILED) {
                            s10 = [];
                            s11 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 44) {
                              s12 = peg$c29;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c30); }
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parse_();
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parseIdentifier();
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parse_();
                                  if (s15 !== peg$FAILED) {
                                    s12 = [s12, s13, s14, s15];
                                    s11 = s12;
                                  } else {
                                    peg$currPos = s11;
                                    s11 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$c1;
                                }
                              } else {
                                peg$currPos = s11;
                                s11 = peg$c1;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$c1;
                            }
                            while (s11 !== peg$FAILED) {
                              s10.push(s11);
                              s11 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 44) {
                                s12 = peg$c29;
                                peg$currPos++;
                              } else {
                                s12 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c30); }
                              }
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parse_();
                                if (s13 !== peg$FAILED) {
                                  s14 = peg$parseIdentifier();
                                  if (s14 !== peg$FAILED) {
                                    s15 = peg$parse_();
                                    if (s15 !== peg$FAILED) {
                                      s12 = [s12, s13, s14, s15];
                                      s11 = s12;
                                    } else {
                                      peg$currPos = s11;
                                      s11 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s11;
                                    s11 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$c1;
                                }
                              } else {
                                peg$currPos = s11;
                                s11 = peg$c1;
                              }
                            }
                            if (s10 !== peg$FAILED) {
                              s5 = [s5, s6, s7, s8, s9, s10];
                              s4 = s5;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$c1;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$c1;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$c1;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c1;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$c6;
                  }
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c31(s2, s3, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 8) === peg$c32) {
                s1 = peg$c32;
                peg$currPos += 8;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c34.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c35); }
                }
                if (s3 !== peg$FAILED) {
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c34.test(input.charAt(peg$currPos))) {
                      s3 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c35); }
                    }
                  }
                } else {
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c36(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7) === peg$c37) {
                  s1 = peg$c37;
                  peg$currPos += 7;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c38); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseIdentifier();
                  if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c39(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 6) === peg$c40) {
                    s1 = peg$c40;
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c41); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseExpression();
                      if (s3 === peg$FAILED) {
                        s3 = peg$c6;
                      }
                      if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c42(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c43) {
                      s1 = peg$c43;
                      peg$currPos += 3;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c44); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseIndentNewline();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseBlock();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseIndentRemove();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parse__();
                            if (s5 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 5) === peg$c45) {
                                s6 = peg$c45;
                                peg$currPos += 5;
                              } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c46); }
                              }
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parse_();
                                if (s7 !== peg$FAILED) {
                                  s8 = peg$parseIdentifier();
                                  if (s8 !== peg$FAILED) {
                                    s9 = peg$parseIndentNewline();
                                    if (s9 !== peg$FAILED) {
                                      s10 = peg$parseBlock();
                                      if (s10 !== peg$FAILED) {
                                        s11 = peg$parseIndentRemove();
                                        if (s11 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c47(s3, s8, s10);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 5) === peg$c48) {
                        s1 = peg$c48;
                        peg$currPos += 5;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c49); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseExpression();
                          if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c50(s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 4) === peg$c51) {
                          s1 = peg$c51;
                          peg$currPos += 4;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c52); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$currPos;
                          peg$silentFails++;
                          s3 = peg$parseAnyIdentifier();
                          peg$silentFails--;
                          if (s3 === peg$FAILED) {
                            s2 = peg$c19;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c1;
                          }
                          if (s2 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c53();
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 5) === peg$c54) {
                            s1 = peg$c54;
                            peg$currPos += 5;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c55); }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parse_();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseIdentifier();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parse_();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$currPos;
                                  if (input.substr(peg$currPos, 7) === peg$c56) {
                                    s6 = peg$c56;
                                    peg$currPos += 7;
                                  } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c57); }
                                  }
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parse_();
                                    if (s7 !== peg$FAILED) {
                                      s8 = peg$parseAnyIdentifier();
                                      if (s8 !== peg$FAILED) {
                                        s6 = [s6, s7, s8];
                                        s5 = s6;
                                      } else {
                                        peg$currPos = s5;
                                        s5 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s5;
                                      s5 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$c1;
                                  }
                                  if (s5 === peg$FAILED) {
                                    s5 = peg$c6;
                                  }
                                  if (s5 !== peg$FAILED) {
                                    s6 = peg$parseIndentNewline();
                                    if (s6 !== peg$FAILED) {
                                      s7 = peg$currPos;
                                      s8 = peg$parse__();
                                      if (s8 !== peg$FAILED) {
                                        s9 = peg$parseKeyValuePair();
                                        if (s9 !== peg$FAILED) {
                                          s8 = [s8, s9];
                                          s7 = s8;
                                        } else {
                                          peg$currPos = s7;
                                          s7 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s7;
                                        s7 = peg$c1;
                                      }
                                      if (s7 === peg$FAILED) {
                                        s7 = peg$parseComment();
                                      }
                                      if (s7 !== peg$FAILED) {
                                        s8 = [];
                                        s9 = peg$currPos;
                                        s10 = [];
                                        s11 = peg$currPos;
                                        s12 = peg$parseEOL();
                                        if (s12 !== peg$FAILED) {
                                          s13 = peg$parseIndent();
                                          if (s13 !== peg$FAILED) {
                                            s12 = [s12, s13];
                                            s11 = s12;
                                          } else {
                                            peg$currPos = s11;
                                            s11 = peg$c1;
                                          }
                                        } else {
                                          peg$currPos = s11;
                                          s11 = peg$c1;
                                        }
                                        if (s11 !== peg$FAILED) {
                                          while (s11 !== peg$FAILED) {
                                            s10.push(s11);
                                            s11 = peg$currPos;
                                            s12 = peg$parseEOL();
                                            if (s12 !== peg$FAILED) {
                                              s13 = peg$parseIndent();
                                              if (s13 !== peg$FAILED) {
                                                s12 = [s12, s13];
                                                s11 = s12;
                                              } else {
                                                peg$currPos = s11;
                                                s11 = peg$c1;
                                              }
                                            } else {
                                              peg$currPos = s11;
                                              s11 = peg$c1;
                                            }
                                          }
                                        } else {
                                          s10 = peg$c1;
                                        }
                                        if (s10 !== peg$FAILED) {
                                          s11 = peg$parseKeyValuePair();
                                          if (s11 === peg$FAILED) {
                                            s11 = peg$parseComment();
                                          }
                                          if (s11 !== peg$FAILED) {
                                            s10 = [s10, s11];
                                            s9 = s10;
                                          } else {
                                            peg$currPos = s9;
                                            s9 = peg$c1;
                                          }
                                        } else {
                                          peg$currPos = s9;
                                          s9 = peg$c1;
                                        }
                                        while (s9 !== peg$FAILED) {
                                          s8.push(s9);
                                          s9 = peg$currPos;
                                          s10 = [];
                                          s11 = peg$currPos;
                                          s12 = peg$parseEOL();
                                          if (s12 !== peg$FAILED) {
                                            s13 = peg$parseIndent();
                                            if (s13 !== peg$FAILED) {
                                              s12 = [s12, s13];
                                              s11 = s12;
                                            } else {
                                              peg$currPos = s11;
                                              s11 = peg$c1;
                                            }
                                          } else {
                                            peg$currPos = s11;
                                            s11 = peg$c1;
                                          }
                                          if (s11 !== peg$FAILED) {
                                            while (s11 !== peg$FAILED) {
                                              s10.push(s11);
                                              s11 = peg$currPos;
                                              s12 = peg$parseEOL();
                                              if (s12 !== peg$FAILED) {
                                                s13 = peg$parseIndent();
                                                if (s13 !== peg$FAILED) {
                                                  s12 = [s12, s13];
                                                  s11 = s12;
                                                } else {
                                                  peg$currPos = s11;
                                                  s11 = peg$c1;
                                                }
                                              } else {
                                                peg$currPos = s11;
                                                s11 = peg$c1;
                                              }
                                            }
                                          } else {
                                            s10 = peg$c1;
                                          }
                                          if (s10 !== peg$FAILED) {
                                            s11 = peg$parseKeyValuePair();
                                            if (s11 === peg$FAILED) {
                                              s11 = peg$parseComment();
                                            }
                                            if (s11 !== peg$FAILED) {
                                              s10 = [s10, s11];
                                              s9 = s10;
                                            } else {
                                              peg$currPos = s9;
                                              s9 = peg$c1;
                                            }
                                          } else {
                                            peg$currPos = s9;
                                            s9 = peg$c1;
                                          }
                                        }
                                        if (s8 !== peg$FAILED) {
                                          s9 = peg$parseIndentRemove();
                                          if (s9 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c58(s3, s5, s7, s8);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseForStatement();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseAssign();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseExpression();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseComment();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = [];
                                    if (s1 !== peg$FAILED) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c53();
                                    }
                                    s0 = s1;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseForStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c59) {
        s1 = peg$c59;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c61) {
            s3 = peg$c61;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifier();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c63) {
                s5 = peg$c63;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c64); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseExpression();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIndentNewline();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseBlock();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseIndentRemove();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c65(s2, s4, s6, s8);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c59) {
          s1 = peg$c59;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIdentifier();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c63) {
              s3 = peg$c63;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c64); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseRange();
              if (s4 === peg$FAILED) {
                s4 = peg$parseExpression();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseIndentNewline();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseBlock();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseIndentRemove();
                    if (s7 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c66(s2, s4, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c59) {
            s1 = peg$c59;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c60); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseIdentifier();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c67) {
                s3 = peg$c67;
                peg$currPos += 4;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c68); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseExpression();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseIndentNewline();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseBlock();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseIndentRemove();
                      if (s7 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c69(s2, s4, s6);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c59) {
              s1 = peg$c59;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c60); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseIdentifier();
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c61) {
                  s3 = peg$c61;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c62); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseIdentifier();
                  if (s4 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c63) {
                      s5 = peg$c63;
                      peg$currPos += 4;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c64); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseExpression();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseEOL();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parseIndent();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseForStatement();
                            if (s9 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c65(s2, s4, s6, s9);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 4) === peg$c59) {
                s1 = peg$c59;
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c60); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseIdentifier();
                if (s2 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c63) {
                    s3 = peg$c63;
                    peg$currPos += 4;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c64); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseRange();
                    if (s4 === peg$FAILED) {
                      s4 = peg$parseExpression();
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseEOL();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parseIndent();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseForStatement();
                          if (s7 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c66(s2, s4, s7);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c59) {
                  s1 = peg$c59;
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c60); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseIdentifier();
                  if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c67) {
                      s3 = peg$c67;
                      peg$currPos += 4;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c68); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseExpression();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseEOL();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parseIndent();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parseForStatement();
                            if (s7 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c69(s2, s4, s7);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseIndentedBlockOrThenPlusExpresssion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseIndentNewline();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBlock();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIndentRemove();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c70(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c71) {
            s2 = peg$c71;
            peg$currPos += 4;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseStatement();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c73(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseIndentedBlockOrExpresssion() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseIndentNewline();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBlock();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIndentRemove();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c70(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseStatement();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c73(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseEOL() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c74) {
        s0 = peg$c74;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 10) {
          s0 = peg$c76;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c77); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c78;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c79); }
          }
        }
      }

      return s0;
    }

    function peg$parseIndent() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c80.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c80.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c82(s1);
        if (s2) {
          s2 = peg$c19;
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIndentNewline() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEOL();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIndentAdd();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIndent();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIndentAdd() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c80.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c80.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c81); }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c83(s1);
        if (s2) {
          s2 = peg$c19;
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c84(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIndentRemove() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = [];
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c85();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseComment() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c86;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = peg$parseEOL();
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = peg$c19;
        } else {
          peg$currPos = s5;
          s5 = peg$c1;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c88); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$c1;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parseEOL();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = peg$c19;
          } else {
            peg$currPos = s5;
            s5 = peg$c1;
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c88); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c89(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAssign() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAssignmentOperator();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpression();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c90(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseExpression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseAssignmentOperator();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseExpression();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c90(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseThisProperty();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseAssignmentOperator();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseExpression();
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c90(s1, s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        }
      }

      return s0;
    }

    function peg$parseAssignmentOperator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s1 = peg$c91;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c91;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c92); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c19;
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c93();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c94) {
          s0 = peg$c94;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c96) {
            s0 = peg$c96;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c97); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c98) {
              s0 = peg$c98;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c99); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c100) {
                s0 = peg$c100;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c101); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c102) {
                  s0 = peg$c102;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c103); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c104) {
                    s0 = peg$c104;
                    peg$currPos += 3;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c105); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c106) {
                      s0 = peg$c106;
                      peg$currPos += 3;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c107); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c108) {
                        s0 = peg$c108;
                        peg$currPos += 4;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c109); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c110) {
                          s0 = peg$c110;
                          peg$currPos += 2;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c111); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c112) {
                            s0 = peg$c112;
                            peg$currPos += 2;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c113); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c114) {
                              s0 = peg$c114;
                              peg$currPos += 2;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c115); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseBinaryOperator() {
      var s0, s1, s2, s3;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c116;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s0 = peg$c118;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c119); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s0 = peg$c120;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s0 = peg$c122;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c123); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s0 = peg$c124;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c125); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 38) {
                  s0 = peg$c126;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c127); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 124) {
                    s0 = peg$c128;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c129); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 94) {
                      s0 = peg$c130;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c131); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c132) {
                        s0 = peg$c132;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c133); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c134) {
                          s0 = peg$c134;
                          peg$currPos += 3;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c135); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c136) {
                            s0 = peg$c136;
                            peg$currPos += 2;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c137); }
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 2) === peg$c138) {
                              s1 = peg$c138;
                              peg$currPos += 2;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c139); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c140();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 2) === peg$c141) {
                                s1 = peg$c141;
                                peg$currPos += 2;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c142); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c143();
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c144) {
                                  s0 = peg$c144;
                                  peg$currPos += 2;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c145); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c146) {
                                    s0 = peg$c146;
                                    peg$currPos += 2;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c147); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 60) {
                                      s0 = peg$c148;
                                      peg$currPos++;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c149); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 62) {
                                        s0 = peg$c150;
                                        peg$currPos++;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c151); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.substr(peg$currPos, 3) === peg$c152) {
                                          s1 = peg$c152;
                                          peg$currPos += 3;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c153); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$currPos;
                                          peg$silentFails++;
                                          s3 = peg$parseIdentifierPart();
                                          peg$silentFails--;
                                          if (s3 === peg$FAILED) {
                                            s2 = peg$c19;
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$c1;
                                          }
                                          if (s2 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c154();
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c1;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          if (input.substr(peg$currPos, 2) === peg$c155) {
                                            s1 = peg$c155;
                                            peg$currPos += 2;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c156); }
                                          }
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$currPos;
                                            peg$silentFails++;
                                            s3 = peg$parseIdentifierPart();
                                            peg$silentFails--;
                                            if (s3 === peg$FAILED) {
                                              s2 = peg$c19;
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$c1;
                                            }
                                            if (s2 !== peg$FAILED) {
                                              peg$reportedPos = s0;
                                              s1 = peg$c157();
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c1;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            if (input.substr(peg$currPos, 10) === peg$c158) {
                                              s1 = peg$c158;
                                              peg$currPos += 10;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c159); }
                                            }
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$currPos;
                                              peg$silentFails++;
                                              s3 = peg$parseIdentifierPart();
                                              peg$silentFails--;
                                              if (s3 === peg$FAILED) {
                                                s2 = peg$c19;
                                              } else {
                                                peg$currPos = s2;
                                                s2 = peg$c1;
                                              }
                                              if (s2 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c160();
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c1;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c1;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              if (input.substr(peg$currPos, 2) === peg$c161) {
                                                s1 = peg$c161;
                                                peg$currPos += 2;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c162); }
                                              }
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$currPos;
                                                peg$silentFails++;
                                                s3 = peg$parseIdentifierPart();
                                                peg$silentFails--;
                                                if (s3 === peg$FAILED) {
                                                  s2 = peg$c19;
                                                } else {
                                                  peg$currPos = s2;
                                                  s2 = peg$c1;
                                                }
                                                if (s2 !== peg$FAILED) {
                                                  peg$reportedPos = s0;
                                                  s1 = peg$c163();
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c1;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c1;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseUnaryOperator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c164) {
        s1 = peg$c164;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c165); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c19;
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c166();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c167) {
          s1 = peg$c167;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c168); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parseIdentifierPart();
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c19;
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c169();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c170) {
            s0 = peg$c170;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c171); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s0 = peg$c116;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c117); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c172) {
                s0 = peg$c172;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c173); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                  s0 = peg$c118;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c119); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 126) {
                    s0 = peg$c174;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c175); }
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c176) {
                      s1 = peg$c176;
                      peg$currPos += 3;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c177); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$currPos;
                      peg$silentFails++;
                      s3 = peg$parseIdentifierPart();
                      peg$silentFails--;
                      if (s3 === peg$FAILED) {
                        s2 = peg$c19;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c1;
                      }
                      if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c178();
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsePostfixOperator() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c170) {
        s0 = peg$c170;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c172) {
          s0 = peg$c172;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c173); }
        }
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseBinaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 63) {
            s4 = peg$c179;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c180); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseExpression();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s8 = peg$c27;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c28); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseExpression();
                      if (s10 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7, s8, s9, s10];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c1;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c1;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c1;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c1;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c6;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c181(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseBinaryExpression() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsePostfixExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseBinaryOperator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseExpression();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c6;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c182(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsePostfixExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseFunctionExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePostfixOperator();
          if (s3 === peg$FAILED) {
            s3 = peg$c6;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c183(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFunctionExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseValue();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s4 = peg$c184;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c185); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseExpression();
            if (s6 !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s8 = peg$c186;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c187); }
                }
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c188(s6);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c189;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c190); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseExpression();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseIdentifierPart();
                }
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c191(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
              s4 = peg$c192;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c193); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseExpressionTuple();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c194;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c195); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s3;
                      s4 = peg$c196(s6);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c1;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s4 = peg$c184;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c185); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseExpression();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s8 = peg$c186;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c187); }
                  }
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c188(s6);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s5 = peg$c189;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c190); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseExpression();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parseIdentifierPart();
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c191(s7);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 40) {
                s4 = peg$c192;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c193); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse__();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseExpressionTuple();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse__();
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s8 = peg$c194;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c195); }
                      }
                      if (s8 !== peg$FAILED) {
                        peg$reportedPos = s3;
                        s4 = peg$c196(s6);
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c1;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c1;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c197(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseValue() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseUnaryOperator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c198(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseHexNumber();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumber();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLiteral();
            if (s0 === peg$FAILED) {
              s0 = peg$parseThisProperty();
              if (s0 === peg$FAILED) {
                s0 = peg$parseThisToken();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseStringLiteral();
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseIdentifier();
                    if (s1 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c199(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 5) === peg$c200) {
                        s1 = peg$c200;
                        peg$currPos += 5;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c201); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$currPos;
                        peg$silentFails++;
                        s3 = peg$parseIdentifierPart();
                        peg$silentFails--;
                        if (s3 === peg$FAILED) {
                          s2 = peg$c19;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c1;
                        }
                        if (s2 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c202();
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 3) === peg$c203) {
                          s1 = peg$c203;
                          peg$currPos += 3;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c204); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parse_();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseExpression();
                            if (s3 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c205(s3);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 91) {
                            s1 = peg$c184;
                            peg$currPos++;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c185); }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parse__();
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseExpression();
                              if (s3 === peg$FAILED) {
                                s3 = peg$c6;
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = [];
                                s5 = peg$currPos;
                                s6 = peg$parse__();
                                if (s6 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 44) {
                                    s7 = peg$c29;
                                    peg$currPos++;
                                  } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c30); }
                                  }
                                  if (s7 !== peg$FAILED) {
                                    s8 = peg$parse__();
                                    if (s8 !== peg$FAILED) {
                                      s9 = peg$parseExpression();
                                      if (s9 !== peg$FAILED) {
                                        s6 = [s6, s7, s8, s9];
                                        s5 = s6;
                                      } else {
                                        peg$currPos = s5;
                                        s5 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s5;
                                      s5 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$c1;
                                }
                                while (s5 !== peg$FAILED) {
                                  s4.push(s5);
                                  s5 = peg$currPos;
                                  s6 = peg$parse__();
                                  if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                      s7 = peg$c29;
                                      peg$currPos++;
                                    } else {
                                      s7 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c30); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                      s8 = peg$parse__();
                                      if (s8 !== peg$FAILED) {
                                        s9 = peg$parseExpression();
                                        if (s9 !== peg$FAILED) {
                                          s6 = [s6, s7, s8, s9];
                                          s5 = s6;
                                        } else {
                                          peg$currPos = s5;
                                          s5 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s5;
                                        s5 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s5;
                                      s5 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$c1;
                                  }
                                }
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parse__();
                                  if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                      s6 = peg$c29;
                                      peg$currPos++;
                                    } else {
                                      s6 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c30); }
                                    }
                                    if (s6 === peg$FAILED) {
                                      s6 = peg$c6;
                                    }
                                    if (s6 !== peg$FAILED) {
                                      s7 = peg$parse__();
                                      if (s7 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 93) {
                                          s8 = peg$c186;
                                          peg$currPos++;
                                        } else {
                                          s8 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c187); }
                                        }
                                        if (s8 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c206(s3, s4);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 123) {
                              s1 = peg$c207;
                              peg$currPos++;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c208); }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$currPos;
                              s3 = peg$parse__();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseAnyKeyValuePair();
                                if (s4 !== peg$FAILED) {
                                  s3 = [s3, s4];
                                  s2 = s3;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$c1;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$c1;
                              }
                              if (s2 === peg$FAILED) {
                                s2 = peg$c6;
                              }
                              if (s2 !== peg$FAILED) {
                                s3 = [];
                                s4 = peg$currPos;
                                s5 = peg$parse__();
                                if (s5 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 44) {
                                    s6 = peg$c29;
                                    peg$currPos++;
                                  } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c30); }
                                  }
                                  if (s6 === peg$FAILED) {
                                    s6 = peg$c6;
                                  }
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parse__();
                                    if (s7 !== peg$FAILED) {
                                      s8 = peg$parseAnyKeyValuePair();
                                      if (s8 !== peg$FAILED) {
                                        s5 = [s5, s6, s7, s8];
                                        s4 = s5;
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$c1;
                                }
                                while (s4 !== peg$FAILED) {
                                  s3.push(s4);
                                  s4 = peg$currPos;
                                  s5 = peg$parse__();
                                  if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                      s6 = peg$c29;
                                      peg$currPos++;
                                    } else {
                                      s6 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c30); }
                                    }
                                    if (s6 === peg$FAILED) {
                                      s6 = peg$c6;
                                    }
                                    if (s6 !== peg$FAILED) {
                                      s7 = peg$parse__();
                                      if (s7 !== peg$FAILED) {
                                        s8 = peg$parseAnyKeyValuePair();
                                        if (s8 !== peg$FAILED) {
                                          s5 = [s5, s6, s7, s8];
                                          s4 = s5;
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$c1;
                                  }
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parse__();
                                  if (s4 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                      s5 = peg$c29;
                                      peg$currPos++;
                                    } else {
                                      s5 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c30); }
                                    }
                                    if (s5 === peg$FAILED) {
                                      s5 = peg$c6;
                                    }
                                    if (s5 !== peg$FAILED) {
                                      s6 = peg$parse__();
                                      if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 125) {
                                          s7 = peg$c209;
                                          peg$currPos++;
                                        } else {
                                          s7 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c210); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c211(s2, s3);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 40) {
                                s1 = peg$c192;
                                peg$currPos++;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c193); }
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parse_();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parseIdentifierTuple();
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parse_();
                                    if (s4 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 41) {
                                        s5 = peg$c194;
                                        peg$currPos++;
                                      } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c195); }
                                      }
                                      if (s5 !== peg$FAILED) {
                                        s6 = peg$parse_();
                                        if (s6 !== peg$FAILED) {
                                          if (input.substr(peg$currPos, 2) === peg$c212) {
                                            s7 = peg$c212;
                                            peg$currPos += 2;
                                          } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c213); }
                                          }
                                          if (s7 !== peg$FAILED) {
                                            s8 = peg$parseIndentNewline();
                                            if (s8 !== peg$FAILED) {
                                              s9 = peg$parseBlock();
                                              if (s9 !== peg$FAILED) {
                                                s10 = peg$parseIndentRemove();
                                                if (s10 !== peg$FAILED) {
                                                  peg$reportedPos = s0;
                                                  s1 = peg$c214(s3, s9);
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c1;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c1;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c1;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 40) {
                                  s1 = peg$c192;
                                  peg$currPos++;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c193); }
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parse_();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseIdentifierTuple();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parse_();
                                      if (s4 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                          s5 = peg$c194;
                                          peg$currPos++;
                                        } else {
                                          s5 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c195); }
                                        }
                                        if (s5 !== peg$FAILED) {
                                          s6 = peg$parse_();
                                          if (s6 !== peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c212) {
                                              s7 = peg$c212;
                                              peg$currPos += 2;
                                            } else {
                                              s7 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c213); }
                                            }
                                            if (s7 !== peg$FAILED) {
                                              s8 = peg$parse_();
                                              if (s8 !== peg$FAILED) {
                                                s9 = peg$parseStatement();
                                                if (s9 !== peg$FAILED) {
                                                  peg$reportedPos = s0;
                                                  s1 = peg$c215(s3, s9);
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c1;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c1;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c1;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c1;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c1;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseGroupedExpression();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseKeyValuePair() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c27;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpression();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c216(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAnyKeyValuePair() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseIdentifierPart();
      if (s2 !== peg$FAILED) {
        peg$reportedPos = s1;
        s2 = peg$c217(s2);
      }
      s1 = s2;
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c218;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c219); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseDoubleStringCharacter();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseDoubleStringCharacter();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c218;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c219); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s1;
              s2 = peg$c217(s3);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c1;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 39) {
            s2 = peg$c220;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c221); }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseSingleStringCharacter();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseSingleStringCharacter();
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s4 = peg$c220;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c221); }
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s1;
                s2 = peg$c217(s3);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c1;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c1;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c27;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpression();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c216(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseGroupedExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c192;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c193); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c194;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c195); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c222(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRange() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c27;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c91;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c92); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c6;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseExpression();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s9 = peg$c27;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c28); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseExpression();
                        if (s11 !== peg$FAILED) {
                          s9 = [s9, s10, s11];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$c1;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c1;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c1;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$c6;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c223(s1, s4, s6, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseNumber() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c118;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c119); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c6;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c224;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c225); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (peg$c226.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c227); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c228.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c229); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c228.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c229); }
              }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s4 = peg$c189;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c190); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c228.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c229); }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$c228.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c229); }
                }
              }
            } else {
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c6;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 101) {
              s5 = peg$c230;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c231); }
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s6 = peg$c118;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c119); }
              }
              if (s6 === peg$FAILED) {
                s6 = peg$c6;
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                if (peg$c228.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c229); }
                }
                if (s8 !== peg$FAILED) {
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    if (peg$c228.test(input.charAt(peg$currPos))) {
                      s8 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c229); }
                    }
                  }
                } else {
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c6;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c232(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseHexNumber() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c233) {
        s1 = peg$c233;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c234); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c235.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c236); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c235.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c236); }
            }
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c237();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIdentifier() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseReservedWord();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = peg$c19;
      } else {
        peg$currPos = s2;
        s2 = peg$c1;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifierPart();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAnyIdentifier() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseDigits();
      if (s2 === peg$FAILED) {
        s2 = peg$parseLetters();
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s2 = peg$c238;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c239); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s2 = peg$c189;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c190); }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseDigits();
          if (s2 === peg$FAILED) {
            s2 = peg$parseLetters();
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 95) {
                s2 = peg$c238;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c239); }
              }
              if (s2 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s2 = peg$c189;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c190); }
                }
              }
            }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIdentifierPart() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseDigits();
      if (s1 === peg$FAILED) {
        s1 = peg$parseLetters();
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s1 = peg$c238;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c239); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseDigits();
          if (s1 === peg$FAILED) {
            s1 = peg$parseLetters();
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 95) {
                s1 = peg$c238;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c239); }
              }
            }
          }
        }
      } else {
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIdentifierTuple() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c29;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseIdentifier();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c29;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c30); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseIdentifier();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c240(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c241();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseExpressionTuple() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c29;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c29;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c30); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c240(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c241();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseDigits() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c228.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c229); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c228.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c229); }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLetters() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c242.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c243); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c242.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c243); }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s1 = peg$c244;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c245); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9) {
          s1 = peg$c246;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c247); }
        }
        if (s1 === peg$FAILED) {
          s1 = peg$parseComment();
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (input.charCodeAt(peg$currPos) === 32) {
          s1 = peg$c244;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c245); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 9) {
            s1 = peg$c246;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c247); }
          }
          if (s1 === peg$FAILED) {
            s1 = peg$parseComment();
          }
        }
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      s0 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s1 = peg$c244;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c245); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9) {
          s1 = peg$c246;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c247); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s1 = peg$c78;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c79); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 10) {
              s1 = peg$c76;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c77); }
            }
            if (s1 === peg$FAILED) {
              s1 = peg$parseComment();
            }
          }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (input.charCodeAt(peg$currPos) === 32) {
          s1 = peg$c244;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c245); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 9) {
            s1 = peg$c246;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c247); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 13) {
              s1 = peg$c78;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c79); }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 10) {
                s1 = peg$c76;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c77); }
              }
              if (s1 === peg$FAILED) {
                s1 = peg$parseComment();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNoop() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c248();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseReservedWord() {
      var s0;

      s0 = peg$parseKeyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLiteral();
      }

      return s0;
    }

    function peg$parseKeyword() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c15) {
        s1 = peg$c15;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c249) {
          s1 = peg$c249;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c250); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c45) {
            s1 = peg$c45;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c46); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c17) {
              s1 = peg$c17;
              peg$currPos += 8;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c251) {
                s1 = peg$c251;
                peg$currPos += 8;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c252); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c253) {
                  s1 = peg$c253;
                  peg$currPos += 7;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c254); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c164) {
                    s1 = peg$c164;
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c165); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c255) {
                      s1 = peg$c255;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c256); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c9) {
                        s1 = peg$c9;
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c10); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c257) {
                          s1 = peg$c257;
                          peg$currPos += 7;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c258); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c259) {
                            s1 = peg$c259;
                            peg$currPos += 3;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c260); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 8) === peg$c261) {
                              s1 = peg$c261;
                              peg$currPos += 8;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c262); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c263) {
                                s1 = peg$c263;
                                peg$currPos += 2;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c264); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 10) === peg$c158) {
                                  s1 = peg$c158;
                                  peg$currPos += 10;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c159); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c161) {
                                    s1 = peg$c161;
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c162); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 3) === peg$c203) {
                                      s1 = peg$c203;
                                      peg$currPos += 3;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c204); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 6) === peg$c40) {
                                        s1 = peg$c40;
                                        peg$currPos += 6;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c41); }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 6) === peg$c265) {
                                          s1 = peg$c265;
                                          peg$currPos += 6;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c266); }
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 4) === peg$c267) {
                                            s1 = peg$c267;
                                            peg$currPos += 4;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c268); }
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 5) === peg$c48) {
                                              s1 = peg$c48;
                                              peg$currPos += 5;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c49); }
                                            }
                                            if (s1 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 3) === peg$c43) {
                                                s1 = peg$c43;
                                                peg$currPos += 3;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c44); }
                                              }
                                              if (s1 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 6) === peg$c167) {
                                                  s1 = peg$c167;
                                                  peg$currPos += 6;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c168); }
                                                }
                                                if (s1 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 3) === peg$c269) {
                                                    s1 = peg$c269;
                                                    peg$currPos += 3;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c270); }
                                                  }
                                                  if (s1 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 4) === peg$c271) {
                                                      s1 = peg$c271;
                                                      peg$currPos += 4;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c272); }
                                                    }
                                                    if (s1 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 5) === peg$c273) {
                                                        s1 = peg$c273;
                                                        peg$currPos += 5;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c274); }
                                                      }
                                                      if (s1 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 4) === peg$c275) {
                                                          s1 = peg$c275;
                                                          peg$currPos += 4;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c276); }
                                                        }
                                                        if (s1 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 5) === peg$c54) {
                                                            s1 = peg$c54;
                                                            peg$currPos += 5;
                                                          } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c55); }
                                                          }
                                                          if (s1 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 5) === peg$c277) {
                                                              s1 = peg$c277;
                                                              peg$currPos += 5;
                                                            } else {
                                                              s1 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c278); }
                                                            }
                                                            if (s1 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 4) === peg$c279) {
                                                                s1 = peg$c279;
                                                                peg$currPos += 4;
                                                              } else {
                                                                s1 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c280); }
                                                              }
                                                              if (s1 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 6) === peg$c281) {
                                                                  s1 = peg$c281;
                                                                  peg$currPos += 6;
                                                                } else {
                                                                  s1 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c282); }
                                                                }
                                                                if (s1 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 7) === peg$c56) {
                                                                    s1 = peg$c56;
                                                                    peg$currPos += 7;
                                                                  } else {
                                                                    s1 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c57); }
                                                                  }
                                                                  if (s1 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 6) === peg$c283) {
                                                                      s1 = peg$c283;
                                                                      peg$currPos += 6;
                                                                    } else {
                                                                      s1 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c284); }
                                                                    }
                                                                    if (s1 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 5) === peg$c200) {
                                                                        s1 = peg$c200;
                                                                        peg$currPos += 5;
                                                                      } else {
                                                                        s1 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c201); }
                                                                      }
                                                                      if (s1 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 4) === peg$c51) {
                                                                          s1 = peg$c51;
                                                                          peg$currPos += 4;
                                                                        } else {
                                                                          s1 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c19;
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLiteral() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c285) {
        s1 = peg$c285;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c286); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c287) {
          s1 = peg$c287;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c288); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c289) {
            s1 = peg$c289;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c290); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c291) {
              s1 = peg$c291;
              peg$currPos += 9;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c292); }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c293(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseThisToken() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 64) {
        s2 = peg$c294;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c295); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 64) {
            s2 = peg$c294;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c295); }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c296(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseThisProperty() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseThisToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c297(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseStringLiteral() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c218;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c219); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseDoubleStringCharacter();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDoubleStringCharacter();
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s4 = peg$c218;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c219); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s2 = peg$c220;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c221); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseSingleStringCharacter();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseSingleStringCharacter();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s4 = peg$c220;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c221); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c1;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c299(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c298); }
      }

      return s0;
    }

    function peg$parseDoubleStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c218;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c219); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c300;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c301); }
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c19;
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c302();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c300;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c301); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseCharacterEscapeSequence();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c303(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseSingleStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c220;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c221); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c300;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c301); }
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c19;
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c302();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c300;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c301); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseCharacterEscapeSequence();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c303(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseCharacterEscapeSequence() {
      var s0;

      s0 = peg$parseSingleEscapeCharacter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNonEscapeCharacter();
      }

      return s0;
    }

    function peg$parseSingleEscapeCharacter() {
      var s0, s1;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c220;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c221); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s0 = peg$c218;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c219); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s1 = peg$c300;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c301); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c304();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 98) {
              s1 = peg$c305;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c306); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c307();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 102) {
                s1 = peg$c308;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c309); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c310();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 110) {
                  s1 = peg$c311;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c312); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c313();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 114) {
                    s1 = peg$c314;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c315); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c316();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 116) {
                      s1 = peg$c317;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c318); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c319();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 118) {
                        s1 = peg$c320;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c321); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c322();
                      }
                      s0 = s1;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNonEscapeCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseSingleEscapeCharacter();
      if (s2 === peg$FAILED) {
        s2 = peg$parseEOL();
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c19;
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c302();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }


        var fs = require('fs');
        var path = require('path');
        var extend = require('util')._extend;

        var indentStack = [],
            indent = "",
            scopeId = 0,
            parser = this;

        function type (name, options) {

            options = options || {};

            var functions = {
                init: options.init || function () {},
                toJS: options.toJS || function () { return '<' + name + '>'; },
                traverse: options.traverse || function () {},
                remove: function(newParent) {
                    var index = this.parent.children.indexOf(this);
                    if (index === -1) {
                        throw "Compiler Error: remove()"
                    }
                    this.parent.children.splice(index, 1);
                },
                insertAfter: function(sibling) {
                    var index = sibling.parent.children.indexOf(sibling);
                    if (index === -1) {
                        throw "Compiler Error: insertAfter()"
                    }
                    sibling.parent.children.splice(index+1, 0, this);
                }
            }

            for ( key in options ) {
                functions[key] = options[key];
            }

            type[name] = function () {
                this.nodeType = name;
                this.parent = null;
                this.scope = null;
                this.children = [];
                functions.init.apply(this, arguments);
            }
            type[name].prototype = functions;
        }

        type('Program', {
            init: function(block) {
                this.block = block;
                this.children = [block];
            },
            traverse: function () {
                var queue = [this];

                // Propagate the imported symbols down to the scope below
                this.block.copySymbols(this.block.getImports().map(function (item) {
                    return item.name;
                }))

                while (queue.length) {

                    var item = queue.pop(0);

                    if (item.nodeType === 'Block' && item.isScope) {
                        item.scope = item;
                    }

                    for (var i = 0; i < item.children.length; i++) {

                        var child = item.children[i];

                        if (!child)
                            continue;

                        if (!child.nodeType)
                            continue;

                        queue.push(child);
                        child.parent = item;
                        child.scope = item.scope;
                        child.traverse();

                    }

                }

            },
            toJS: function (options) {

                parser.options = options;

                this.traverse();

                var out =  this.block.extractPreImportStatements().map(function(item) {
                    return item.toJS();
                }).join('\n');

                out += this.block.extractNodes('IncludeStatement').map(function(item) {
                    return item.toJS();
                }).join('\n');

                var imports = this.block.extractNodes('ImportStatement');
                var export_ = this.block.extractNodes('ExportStatement');

                if (options.bare) {
                    return this.block.toJS();
                }

                if (export_.length > 1) {
                    throw 'Too many export statements...'
                }
                export_ = export_[0];

                if (options.node) {
                    // Handle imports with node
                    out += imports.map(function(item) {
                        return 'var ' + item.name + ' = require("' + item.path + '");';
                    }).join('\n');

                    out += this.block.toJS();

                    if (export_) {
                        out += '\nmodule.exports = ' + export_.ident + ';';
                    }
                    else {
                        out += '\nmodule.exports = {' + this.block.getPublicSymbolsList().map(function(key) {
                            return "'" + key + "': " + key;
                        }).join(',') + '};';
                    }
                }
                else {
                    // Handle imports with require js
                    var pathString = imports.map(function(item) {
                        return '"' + item.path + '"';
                    }).join(', ');

                    var paramString = imports.map(function(item) {
                        return item.name;
                    }).join(', ');


                    var requireFunction = /main\.bs$/.test(options.filePath) ? 'require' : 'define';

                    out += requireFunction + '([' + pathString + '], ';
                    out += 'function(' + paramString + ') \x7b\n"use strict";';
                    out += this.block.toJS();

                    if (export_) {
                        out += '\nreturn ' + export_.ident + ';';
                    }
                    else {
                        out += '\nreturn {' + this.block.getPublicSymbolsList().map(function(key) {
                            return "'" + key + "': " + key;
                        }).join(',') + '};';
                    }

                    out += '\n\x7d);';
                }
                return out;
            }
        });

        type('Noop', {
            semicolon: false,
            toJS: function () {
                return '';
            }
        });

        type('Comment', {
            semicolon: false,
            init: function (text) {
                this.text = text;
            },
            toJS: function () {
                if (parser.options.removeComments) {
                    return '';
                }
                return '//' + this.text;
            }
        });

        type('Number', {
            init: function (n) {
                if (n.indexOf('.') === -1 && n.indexOf('e') === -1) {
                    this.value = parseInt(n);
                }
                else {
                    this.value = parseFloat(n);
                }
            },
            toJS: function () {
                return this.value;
            }
        })

        type('Variable', {
            init: function (name) {
                this.name = name;
            },
            toJS: function () {
                return this.name;
            }
        });

        type('Assignment', {
            init: function(operator, left, value) {
                this.operator = operator;
                this.left = left;
                this.value = value;
                this.children = [left, value];
                this.varThisSonOfABitch = false;
            },
            traverse: function () {
                if (!this.left.nodeType) {
                    this.varThisSonOfABitch = !this.scope.symbols[this.left];
                    this.scope.symbols[this.left] = 1;
                }
            },
            toJS: function () {
                var left = this.left.toJS ? this.left.toJS() : this.left;
                var varShit = this.varThisSonOfABitch ? 'var ' : '';
                return varShit + left + ' ' + this.operator + ' ' + this.value.toJS();
            }
        });

        type('If', {
            semicolon: false,
            init: function (expr, ifBody, elifs, elseBody, ternary) {
                this.expression = expr;
                this.ifBody = ifBody;
                this.elseBody = elseBody;
                this.elifs = elifs || [];
                this.children = [expr, ifBody, elseBody].concat(this.elifs);
                this.ternary = !!ternary;
            },
            toJS: function () {

                if (this.ternary) {
                    return this.expression.toJS() +
                           ' ? ' + this.ifBody.toJS() +
                           ' : ' + this.elseBody.toJS();
                }

                var out = 'if (' + this.expression.toJS() + ') {\n    ';
                out += this.ifBody.toJS() + '\n';
                out += '}';

                for (var i = 0; i < this.elifs.length; i++) {
                    out += ' else ' + this.elifs[i].toJS();
                }

                if (this.elseBody) {
                    out += ' else {\n    ';
                    out += this.elseBody.toJS() + '\n';
                    out += '}';
                }

                return out;
            }
        })

        type('ForLoop', {
            semicolon: false,
            init: function (iterator, item, iterable, body, ofLoop) {
                this.iterator = iterator;
                this.item = item;
                this.iterable = iterable;
                this.iterableLength = null;
                this.body = body;
                this.ofLoop = ofLoop;
                this.children = [iterator, item, iterable, body];
            },
            traverse: function () {
                if (this.iterable.nodeType === 'Range') {
                    this.iterator = this.item;
                }

                if (!this.iterator) {
                    var i = 1;
                    do {
                        this.iterator = '__i' + i++;
                    } while (this.scope.symbols[this.iterator]);
                }

                if (!this.iterableTemp) {
                    var i = 1;
                    do {
                        this.iterableTemp = '__a' + i++;
                    } while (this.scope.symbols[this.iterableTemp]);
                }

                if (!this.iterableLength) {
                    var i = 1;
                    do {
                        this.iterableLength = '__l' + i++;
                    } while (this.scope.symbols[this.iterableLength]);
                }

                this.scope.symbols[this.iterator] = 1;
                this.scope.symbols[this.iterableTemp] = 1;
                this.scope.symbols[this.iterableLength] = 1;
            },
            toJS: function () {
                if (this.iterable.nodeType === 'Range') {
                    return this.toJSRanged();
                }
                else {
                    return this.toJSListed();
                }
            },
            toJSRanged: function () {

                var step = '',
                    iterator = this.iterator,
                    by = this.iterable.by,
                    comparator = ' <';

                if (by.nodeType === 'Number' && by.value === 0) {
                    step == ''
                }

                else if (by.value === 1) {
                    step = iterator + '++';
                }
                else if (by.value === -1) {
                    step = iterator + '--';
                    comparator = ' >';
                }
                else if (by.value < 0) {
                    step = iterator + ' = ' + iterator + by.toJS();
                    comparator = ' >';
                }
                else {
                    step = iterator + ' = ' + iterator + '+' + by.toJS()
                }

                comparator += this.iterable.equals ? '= ' : ' ';

                return 'for (var ' + iterator + ' = ' + this.iterable.from.toJS() + '; ' +
                    iterator + comparator + this.iterable.to.toJS() + '; ' + step + ') {\n' +
                    this.body.toJS() + '\n' +
                    '}';
            },
            toJSListed: function () {

                if (this.ofLoop) {
                    return 'for (var ' + this.item + ' in ' + this.iterable.toJS() + ') {' +
                    this.body.toJS() + '\n' +
                    '}';
                }

                var out = '';

                if (this.iterable.nodeType === 'Variable') {
                    this.iterableTemp = this.iterable.toJS();
                }
                else {
                    out += 'var ' + this.iterableTemp + ' = ' + this.iterable.toJS() + ';'
                }

                return out +
                    'var ' + this.iterableLength + ' = ' + this.iterableTemp + '.length;' +
                    'for (var ' + this.iterator + ' = 0; ' +
                    this.iterator + ' < ' + this.iterableLength + '; ' + this.iterator + '++) { ' +
                    'var ' + this.item + ' = ' + this.iterableTemp + '[' + this.iterator + '];\n' +
                    this.body.toJS() + '\n' +
                    '}';
            }
        });

        type('WhileLoop', {
            semicolon: false,
            init: function (expression, body) {
                this.expression = expression;
                this.body = body;
                this.children = [expression, body];
            },
            toJS: function () {
                return 'while (' + this.expression.toJS() + ') {\n' +
                       this.body.toJS() + '\n' +
                       '}';
            }
        });

        type('Operator', {
            init: function (op, left, right) {
                this.operator = op;
                this.left = left;
                this.right = right;
                this.children = [left, right];
            },
            toJS: function () {
                return this.left.toJS() + ' ' + this.operator + (this.right ? ' ' + this.right.toJS() : '');
            }
        });

        type('UnaryOperator', {
            init: function (op, right) {
                this.operator = op;
                this.right = right;
                this.children = [right];

                if (this.operator === '-' && this.right.nodeType === 'Number') {
                    this.value = -this.right.value;
                }
            },
            toJS: function () {
                return this.operator + ' ' + this.right.toJS();
            }
        });

        type('ListLiteral', {
            init: function (items) {
                this.items = items;
                this.children = items;
            },
            toJS: function () {
                var items = this.items.map(function(item) {
                    return item.toJS();
                });
                return '[' + items.join(', ') + ']';
            }
        });

        type('ObjectLiteral', {
            init: function () {
                this.keys = [];
                this.values = [];
                this.children = this.values;
            },
            add: function (val) {
                this.keys.push(val.key);
                this.values.push(val.value);
            },
            toJS: function () {
                var out = '{';
                for (var i = 0; i < this.keys.length; i++) {
                    out += "'" + this.keys[i] + "': " + this.values[i].toJS();
                    if (i < this.keys.length - 1) {
                        out += ', ';
                    }
                }
                return out + '}';
            }
        });

        type('ClassStatement', {
            semicolon: false,
            init: function (name, extendFrom) {
                this.name = name;
                this.extendFrom = extendFrom;
                this.values = [];
                this.children = [];
                this.init = null;
            },
            add: function (val) {
                this.children.push(val.value);

                if (val.key === 'init') {
                    this.init = val.value;
                }
                else {
                    this.values.push(val);
                }
            },
            toJS: function () {
                var name = this.name;
                var out = 'function ' + this.name + ' ';
                var errorIfNotNewed = 'if ((typeof window !== "undefined" && this === window) || this === self) { throw new TypeError("Tried to call class ' + name + ' as a regular function. Classes can only be called with the \'new\' keyword."); }';
                if (this.init !== null) {
                    out += '(' + this.init.params.join(', ') + ') ';
                    out += '{' + errorIfNotNewed + this.init.body.toJS() + '}'
                }
                else {
                    out += '() {' + errorIfNotNewed + '}';
                }

                if (this.extendFrom) {
                    out += this.name + '.prototype = Object.create(' + this.extendFrom + '.prototype);'
                }

                out += this.values.map(function(item) {
                    return name + '.prototype.' + item.key + ' = ' + item.value.toJS() + ';'
                }).join('\n');
                return out;
            }
        });

        type('LoopControl', {
            init: function (type) {
                this.type = type;
            },
            toJS: function () {
                return this.type;
            }
        });

        type('ImportStatement', {
            semicolon: false,
            init: function (path, name, subImports) {
                this.path = path;
                this.children = subImports || [];
                if (path.indexOf('!') === -1) {
                    this.path = path.replace(/\./g, '/');
                }
                if (this.path[0] === '/') {
                    this.path = '.' + this.path;
                }
                this.name = name || path.split('.')[path.split('.').length-1];

                if (this.name.indexOf('-') !== -1 && name === undefined) {
                    throw new SyntaxError(
                        'Dashes in import statements make me sad, I do not know what to call the imported variable! \nUse "import ... as ..." to give it a name.', '-', '',
                        offset(), line(), path.indexOf('-') + 8
                    )
                }
            },
            toJS: function () {
                return '';
            }
        });

        type('SubImportStatement', {
            init: function(name) {
                this.name = name;
            },
            traverse: function () {
                // Hook these declarations to the scope.
                // We don't have to remove ourselves as ImportStatements will be extracted
                this.scope.symbols[this.name] = 1;
                this.parentImport = this.parent;
                this.insertAfter(this.parentImport);
            },
            toJS: function () {
                return 'var ' + this.name + ' = ' + this.parentImport.name + '.' + this.name;
            }
        })

        type('ExportStatement', {
            semicolon: false,
            init: function (ident) {
                this.ident = ident;
            },
            toJS: function () {
                return '';
            }
        });

        type('IncludeStatement', {
            init: function (path) {
                this.path = path.replace(/\./g, '/');
                if (this.path[0] === '/') {
                    this.path = '..' + this.path;
                }
            },
            toJS: function () {
                var filePath = path.join(parser.options.root, this.path);

                if (fs.existsSync(filePath + '.bs')) {
                    var options = extend({}, parser.options);
                    options.path = filePath + '.bs';
                    return parser.options.parse(parser, fs.readFileSync(filePath + '.bs', 'utf8'), options );
                }
                if (fs.existsSync(filePath + '.js')) {
                    return fs.readFileSync(filePath + '.js', 'utf8');
                }
                error('Could not find file, tried ' + filePath + '.js and .bs')
            }
        });

        type('Literal', {
            init: function (type) {
                this.type = type;
            },
            toJS: function () {
                return this.type;
            }
        });

        type('StringLiteral', {
            init: function (token, string) {
                this.token = token;
                this.string = string.replace(token, '\\' + token);
            },
            toJS: function () {
                return this.token + this.string.split('\n').join('') + this.token;
            }
        });

        type('Block', {
            init: function(statements) {
                this.name = '__scope_' + scopeId++ + '__';
                this.declareName = false;
                this.symbols = {};
                this.statements = statements;
                this.children = statements;
            },
            traverse: function () {
                if (this.parent && this.parent.scope) {
                    this.symbols.__proto__ = this.parent.scope.symbols;
                }

            },
            toJS: function () {

                var out = '';

                if (this.declareName) {
                    out += 'var ' + this.name + ' = this;\n';
                }

                return out + this.statements.map(function (s) {
                    return s.toJS() + (s.semicolon !== false ? ';' : '');
                }).join('\n');
            },
            extractNodes: function (type) {
                var nodes = this.statements.filter(function(statement) {
                    return statement.nodeType === type;
                });

                this.statements = this.statements.filter(function(statement) {
                    return statement.nodeType !== type;
                });

                return nodes;
            },
            extractPreImportStatements: function () {

                var list = [],
                    hadImportsOrExport = false;
                for (var i = 0; i < this.statements.length; i++) {
                    var item = this.statements[i];
                    if (item.nodeType === 'ImportStatement' || item.nodeType === 'ExportStatement') {
                        this.statements = this.statements.slice(i);
                        hadImportsOrExport = true;
                        break;
                    }
                    list.push(item);
                }
                if (!hadImportsOrExport) {
                    return [];
                }

                return list;

            },
            getImports: function () {
                return this.statements.filter(function(statement) {
                    return statement.nodeType === 'ImportStatement';
                });
            },
            getPublicSymbolsList: function () {
                return Object.keys(this.symbols).filter(function(key) {
                    return key[0] !== '_';
                });
            },
            getScopeName: function () {
                this.declareName = true;
                return this.name;
            },
            copySymbols: function (list) {
                for (var i = 0; i < list.length; i++) {
                    this.symbols[list[i]] = 1;
                }
            }
        });

        type('Group', {
            init: function(expr) {
                this.expr = expr;
                this.children = [expr];
            },
            toJS: function () {
                return '(' + this.expr.toJS() + ')';
            }
        });

        type('Function', {
            init: function (params, body) {
                this.params = params;
                this.body = body;
                this.children = [body];
            },
            traverse: function () {
                if (this.body.nodeType === 'Block') {
                    this.body.copySymbols(this.params);
                }
            },
            toJS: function () {
                return 'function(' + this.params.join(', ') + ') {\n' + this.body.toJS() + '\n}';
            }
        });

        type('Return', {
            init: function (body) {
                this.body = body;
                this.children = [body];
            },
            toJS: function () {
                if (this.body === null || this.body.nodeType === 'Noop' ) {
                    return 'return;';
                }

                return 'return ' + this.body.toJS() + (this.body.isScope ? ';' : '');
            }
        });

        type('FunctionCall', {
            init: function (expr, args) {
                this.expr = expr;
                this.args = args;
                this.children = [expr].concat(args);
            },
            toJS: function () {
                var start;
                var expr = this.expr.toJS ? this.expr.toJS() : this.expr;

                // Since we have init as our constructor call...
                if (this.superCall && expr === 'init') {
                    start = 'call(this'
                }
                else if (this.superCall) {
                    start = expr + '.call(this';
                }
                else {
                    start = expr + '(';
                }

                if (this.superCall && this.args.length > 0) {
                    start += ',';
                }

                return start + this.args.map(function(item){
                    return item.toJS();
                }).join(', ') + ')';
            }
        });

        type('PropertyAccess', {
            init: function (value, accessor, type) {
                this.value = value;
                this.accessor = accessor;
                this.type = type;
                this.children = [value, accessor];
            },
            toJS: function () {
                if (this.type === '.') {
                    return this.value.toJS() + '.' + (this.accessor.toJS ? this.accessor.toJS() : this.accessor);
                }

                return this.value.toJS() + '[' + this.accessor.toJS() + ']';
            }
        });

        type('ThisToken', {
            init: function(scopeOffset) {
                this.scopeOffset = scopeOffset;
                this.scopeIdentifier = 'UntraversedThisToken';
            },
            traverse: function () {
                this.scopeIdentifier = this.findScopeIdentifier();
            },
            toJS: function () {
                return this.scopeIdentifier;
            },
            findScopeIdentifier: function () {

                if (this.scopeOffset === 0 ) {
                    return 'this';
                }

                var offset = this.scopeOffset + 1;
                var node = this.parent;

                while (node) {

                    if (node.isScope) {
                        offset--;
                    }

                    if (offset === 0) {
                        return node.getScopeName();
                    }

                    node = node.parent;
                }

                throw 'Scope access overflow; not enough scopes to traverse';
            }
        });

        type('NewExpression', {
            init: function(classExpression) {
                this.classExpression = classExpression;
                this.children = [classExpression];
            },
            toJS: function () {
                return 'new ' + this.classExpression.toJS();
            }
        });

        type('Range', {
            init: function(from, to, by, equals) {
                this.from = from;
                this.to = to;
                this.by = by;
                this.children = [from, to, by];
                this.equals = equals;
            }
        });

        type('Throw', {
            init: function(expr) {
                this.expr = expr;
                this.children = [expr];
            },
            toJS: function () {
                return 'throw ' + this.expr.toJS();
            }
        });

        type('TryCatch', {
            semicolon: false,
            init: function(tryBody, catchVar, catchBody) {
                this.tryBody = tryBody;
                this.catchVar = catchVar;
                this.catchBody = catchBody;
                this.children = [tryBody, catchBody];
            },
            toJS: function () {
                return 'try {' + this.tryBody.toJS() + '} catch (' + this.catchVar + ') {' +
                       this.catchBody.toJS() + '}';
            }
        });
        type('SuperToken', {
            traverse: function () {

                // Find the class in which this super resides
                var target = this;
                while (target.nodeType != 'ClassStatement') {
                    target = target.parent;

                    if (!target) {
                        error("super can only be used inside a classStatement");
                    }
                }

                this.cls = target;

                // Find the function call
                if (this.parent.nodeType != 'PropertyAccess') {
                    expected('super.*');
                }

                if (this.parent.accessor.nodeType != 'FunctionCall') {
                    expected('super.func()');
                }

                this.parent.accessor.superCall = true;

            },
            toJS: function () {
                return this.cls.extendFrom;
            }
        });



    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
